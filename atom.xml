<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Etizolam]]></title>
  <link href="http://jhotta.github.io/atom.xml" rel="self"/>
  <link href="http://jhotta.github.io/"/>
  <updated>2014-01-06T22:43:19+09:00</updated>
  <id>http://jhotta.github.io/</id>
  <author>
    <name><![CDATA[Naotaka Jay Hotta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[伝わる英文の探求 #1]]></title>
    <link href="http://jhotta.github.io/blog/2014/01/06/engineer-english-1/"/>
    <updated>2014-01-06T15:14:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/01/06/engineer-english-1</id>
    <content type="html"><![CDATA[<p>2013年12月2日に、<a href="http://atnd.org/event/aikyari01">&ldquo;「グローバル人材の今を考える」第1弾: 英語を使って働く・英語を学ぶ&rdquo;</a>と題されたセミナーで印象に残ったポイントの一つである <strong>「伝わる」</strong> ことを個人的な解釈に基づいて考えてみました。</p>

<h2>「伝わる英語」って、&#8221;ママゴト英語&#8221;ではないよね〜?!</h2>

<p>私のように英語が不得意で自分勝手な人間にとっては、 <strong>「伝わる英語」</strong>というのは、とても都合が良いことに聞こえました。何故ならば、「ただ単語を並べて、度胸に任せて文章を送り出してしまえばよい」ように聞こえてしまったからです。</p>

<blockquote><p>「伝わった英語」と「伝わる英語」は別物では?</p></blockquote>

<p>対面して話をしている相手ならともかく、Internetを介して技術的質問のチャットに対応してくれる仲間やREADME.txtを読んでくれているユーザに、この強引な手法で大丈夫なのだろうか?</p>

<p>「そこが始まり」や「やむを得ない」とういコメントは至極まっとうで、反論もできないと思います。私もかつては、そのように思っていたのも事実です。しかし、微妙な違いを「伝えたい」、「議論したい」と思えば思うほど、この強引な手法が通用しなくなってきたのも事実です。</p>

<p>例をあげると:</p>

<blockquote><p>ベルを止めてください。 (電気的に止める意図で…)<br/>
(a) Please stop the bell. &ldquo;伝わった英語[ママゴト英語]&#8221;<br/>
(b) Please turn off the bell. &#8220;伝わる英語&rdquo;</p></blockquote>

<p>個人的には、&#8221;stop&#8221;と&#8221;turn off&#8221;の違いを状況に応じて使い分けられる状態が、「伝わる英語」を話していることになると感じ始めています。(実際には、コミュニケーションのレベル感によっては、全然関係ないかもしれません…)</p>

<p>2014年は、この「伝わる英語」に関しも、考えて行こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trema Day #4 参加しました。]]></title>
    <link href="http://jhotta.github.io/blog/2013/11/18/trema-day-4/"/>
    <updated>2013-11-18T13:46:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2013/11/18/trema-day-4</id>
    <content type="html"><![CDATA[<h2>基本情報:</h2>

<ul>
<li><a href="http://atnd.org/event/E0020713">Trema Day #4</a></li>
</ul>


<h3>関連情報:</h3>

<ul>
<li><a href="http://osrg.github.io/ryu/">Ryu</a></li>
<li><a href="http://www.projectfloodlight.org/floodlight/">fooldlight</a></li>
<li><a href="http://trema.github.io/trema/">trema</a></li>
<li><a href="http://www.slideshare.net/stereocat55/tremafirewall">Tremaで試すfirewall</a></li>
</ul>


<h2>感想:</h2>

<p>2013年のDevOps Day Londonで、John WillisがSDNのプレゼンをしていた。彼の話しによれば、現在のSDNを取巻く環境は、彼が2005年くらいにPuppet Labs, Opscodeで顧客としていた&#8221;仮想化, クラウド, 自動化&#8221;に関する会話と酷似ていると言っていた。もしも、10年サイクルでICTに新しいトレンドが来るとすると、SDNのトレンドは既に始まっており、丁度仮想化業界にPuppetが登場する前当たりではないかともコメントしていた。</p>

<p>個人的には、計算能力とネットワーク転送力の比較をしてみると、転送力は明らかにスッペック不足のように感じる上、ネットワークエンジニア１人が管理しているネットワーク機器の数(1:120)は、オペレーションエンジニアが管理している計算ノードよりも圧倒的に少ない（FBでは、5名のシスアドミンで全体を管理）。 ”Infrastructure as Code”という概念には、当然ネットワークも自動化の対象として組み込まれないと完成しないと思う。</p>

<p>ネットワークの知識が中途半端打であったため、SDNの勉強会に参加してプレゼンで話されている単語を拾うのが精一杯であったのだが、今後も引き続き勉強していこうと思わせる分野には間違いと感じることができた。</p>

<h4>今後の行動指針:</h4>

<ul>
<li>NTTの研究所で開発されているRyuというコントローラーは、Pythonで書かれているらしくこの辺から勉強を始めたら理解出来るかな〜。</li>
<li>Goで書かれている、FOSS系のOpenFlowのコントローラーがないか探してみたのですが、みあたらなかった見当たらなかった。日本の発のものはRubyとかPythonで書かれているけど、FOSSとしての配布のことを考えるとGoのほうが便利だから、なにか出来ないか〜。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean UX 入門セミナーへ参加しました。]]></title>
    <link href="http://jhotta.github.io/blog/2013/11/13/lean-ux-seminar/"/>
    <updated>2013-11-13T19:00:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2013/11/13/lean-ux-seminar</id>
    <content type="html"><![CDATA[<h3>基本情報:</h3>

<ul>
<li><a href="http://connpass.com/event/3964/">Lean UX 入門セミナー</a></li>
</ul>


<h3>関連情報:</h3>

<ul>
<li><a href="http://www.amazon.co.jp/dp/B0074KA0A4">Lean UX: Applying Lean Principles to Improve User Experience</a></li>
<li><a href="http://www.amazon.co.jp/dp/B00F3UTIQY">リーン・スタートアップ</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873115914">Running Lean</a></li>
<li><a href="http://www.amazon.co.jp/dp/4798117552">アントレプレナーの教科書</a></li>
<li><a href="http://www.amazon.co.jp/dp/4798122971">ビジネスモデル・ジェネレーション ビジネスモデル設計書</a></li>
<li><a href="http://www.jeffgothelf.com/blog/">Jeff Gothelf Blog</a></li>
</ul>


<h2>感想:</h2>

<ul>
<li>Leanが課題解決型の手法であるために、Lean UXも課題解決型のインクリメンタルな開発に向いていると感じた。この逆に、いずれゲームチェンジャーと認められるようなUXの革命を目指すなら、別の手法の選択もありと感じた。</li>
<li>Leanの手法はイテレーションを前提としているため、外注を巻き込んでのプロジェクトの場合は、その初期の役割再確認や利害関係の再設計を念頭に置いた”場（こたつ）”づくりが、日本では特に重要と感じた。</li>
</ul>

]]></content>
  </entry>
  
</feed>
