<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Etizolam]]></title>
  <link href="http://jhotta.github.io/atom.xml" rel="self"/>
  <link href="http://jhotta.github.io/"/>
  <updated>2014-04-15T17:01:50+09:00</updated>
  <id>http://jhotta.github.io/</id>
  <author>
    <name><![CDATA[@jhotta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Datadog agentをIntel Galileoで動かす(前編)]]></title>
    <link href="http://jhotta.github.io/blog/2014/04/14/datadog-agent-for-intel-galileo-1/"/>
    <updated>2014-04-14T16:54:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/04/14/datadog-agent-for-intel-galileo-1</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://jhotta.github.io/images/blog-images/intel_galileo.jpg" width="300" height="300" title="intel galileo" alt="intel galileo"></p>

<p>Datadog agent(以後DD-agent)が、Raspberry Piであっさり動いてしまったので、流行のIntel Galileo(以降Galileo)でもあっさり動くのではと思い挑戦してみました。
結果から言うと<strong>「問題なく出来ます」</strong>、しかし、Raspberry Pi(Rasbian)の時のように、Datadogが用意してくれている１行コマンド行を実行すれば完成ということには成りませんでした。</p>

<p>こういう時こそ情報の供給がだいじだと思うのでインストール方法を書き残しておくとにします。尚今回は、DD-agentとDogtatsDを起動させ、メトリックスをDatadogに送信しするところまでの手順を書きます。これらのスクリプトをGalileoの起動時に自動で起動する方法やGPIOからの情報を読み込み送信する方法は、後編で書こうと思います。</p>

<h2>起動用のSDイメージについて</h2>

<p>個人的に利用頻度が最も多い<a href="http://wiki.tokor.org/%20Tokoro's%20Tech-Note">Tokoro&rsquo;s Tech-Note</a>で公開されている<a href="http://storage.tokor.org/pub/galileo/images/full">SDフルイメージ</a>を利用します。</p>

<p>このイメージの特徴は、arduino IDEは使えなくなるものの、linux系のlibでちょっとこれがあると便利かもというものがrepoから簡単に入手できることです。(Tokoro氏の善意に感謝します。)</p>

<p>先の<a href="http://storage.tokor.org/pub/galileo/images/full">SDフルイメージ</a>をPCにダウンロードし解凍後、fat32でフォーマットした4G SDカート(4G以上のSDの場合は、4Gのパーティションを作成してください)に書き込めば、起動用のSDカードの準備は完了です。</p>

<p>以下が解凍した<a href="http://storage.tokor.org/pub/galileo/images/full">SDフルイメージ</a>の中身です。
<img class="center" src="http://jhotta.github.io/images/blog-images/SD-full-list.png" width="800" height="800" title="解凍したSDの中身" alt="SD full soft list"></p>

<p>準備ができたSDカードをGalileに差し込んで、LANケーブルと電源を指すと<a href="https://www.yoctoproject.org/%20yocto">Yocto linux</a>が起動してきます。LAN(eth0)は、IP addressを自動で取得する設定に成っているので、Galileoを接続したネットワークにDHCPサーバーが存在している必要があります。IP addressは、OSが起動したのを見計らってIPスキャナー<a href="https://itunes.apple.com/jp/app/lanscan/id472226235?mt=12%20LanSacan">LanScan</a>などでIntel GalileoのMACアドレスを探してIP addressを確認します。MACアドレスの情報は、LANコネクター口の上にシールで張られています。</p>

<p>OSが起動しIP addressが分かったら、sshでGalileoに接続していきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh root@X.X.X.X</span></code></pre></td></tr></table></div></figure>


<p>rootにはpasswordは設定されてないので、sshの接続手順が完了すると、一気に管理者権限のコンソールが表示されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The authenticity of host '192.168.8.171 (192.168.8.171)' can't be established.
</span><span class='line'>RSA key fingerprint is 4d:5e:57:43:b0:02:6e:f3:ae:3c:1e:2c:7a:55:f5:4b.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'X.X.X.X' (RSA) to the list of known hosts.
</span><span class='line'>root@clanton:~#</span></code></pre></td></tr></table></div></figure>


<h2>DD-agent起動に足りないPackageのインストール</h2>

<p>sshで接続ができたところで、まず最初にする作業は、Tokoroさんが提供してくれているPackageをopkgコマンドでインストールするためのrepo情報の追記です。</p>

<p>既にrepo情報が追記された設定ファイルも公開されているので、下記のコマンドを実行して既存のrepo設定ファイルをTokoroさんのrepoの設定情報が記載された設定ファイルに置き換えます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://storage.tokor.org/pub/galileo/packages/opkg.conf -O /etc/opkg/opkg.conf</span></code></pre></td></tr></table></div></figure>


<p>詳細に関しては、<a href="http://wiki.tokor.org/index.php?Intel%A4%CEGalileo%A4%C7%A5%D1%A5%C3%A5%B1%A1%BC%A5%B8%A5%DE%A5%CD%A1%BC%A5%B8%A5%E3opkg%A4%F2%BB%C8%A4%A6%A1%A1-%A1%A1Galileo">「IntelのGalileoでパッケージマネージャopkgを使う」</a>を参照してください。</p>

<p>次に、Package情報を更新し、新しいバージョンのパッケージがあるものは最新に入れ替えておくことにします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opkg update
</span><span class='line'>opkg upgrade</span></code></pre></td></tr></table></div></figure>


<p>起動時にDateコマンドで毎回時間を設定するのは非常に手間なので、自動で時間が設定されるようにします。自動で時間を設定してくれるntpをPackageインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opkg install ntp</span></code></pre></td></tr></table></div></figure>


<p>次に、システムの状態を定期的に監視するためのsysstatをPackageインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opkg install sysstat</span></code></pre></td></tr></table></div></figure>


<p>DD-agentを起動するためのPackageの追加インストールは、これで終了です。</p>

<h2>DD-agentのダウンロード</h2>

<p>OSの準備ができたので、DD-agentをGithubから取得し、Galileoに設置します。
Githubのサイトで、<strong>DD-agent</strong>を検索すると、次のような検索結果が表示されます。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/github-dd-agent.png" width="800" height="800" title="github dd-agent" alt="github dd-agent"></p>

<p>赤枠で囲った項目をダブルクリックして、Datadogが管理しているdd-agentのページに移動します。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/github-dd-agent-dl.png" width="800" height="800" title="github dd-agent" alt="github dd-agent"></p>

<p><code>Download ZIP</code> ボタンを見つけ、右クリックを使ってリンク先URLをクリップボードに保存ます。</p>

<p>Galileoのwgetコマンドでは、githubのCAの情報がうまく処理でないようなので<em>&mdash;no-check-certificate</em>をコマンドオプションに追記し実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget --no-check-certificate https://github.com/DataDog/dd-agent/archive/master.zip</span></code></pre></td></tr></table></div></figure>


<p>ダウンロードが終わったらファイルを解凍し、起動の準備に入ります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unzip master.zip</span></code></pre></td></tr></table></div></figure>


<p>master.zipは、<code>dd-agent-master</code>というディレクトリ以下に展開されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd dd-agent-master</span></code></pre></td></tr></table></div></figure>


<p>ディレクトリを<code>ls</code>で表示してみると次の様になっているはずです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@clanton:~/dd-agent-master# ls
</span><span class='line'>CHANGELOG.md    aggregator.py   dogstream  requirements.txt
</span><span class='line'>LICENSE     checks    emitter.py   resources
</span><span class='line'>LICENSE-boto    checks.d    ez_setup.py  setup.py
</span><span class='line'>LICENSE-httplib2  compat    graphite.py  supervisord.dev.conf
</span><span class='line'>LICENSE-minjson   conf.d    httplibproxy.py  tests
</span><span class='line'>LICENSE-ntplib    config.py   jmxfetch.py  transaction.py
</span><span class='line'>MANIFEST.in   daemon.py   migration.py   urllib2proxy.py
</span><span class='line'>README.markdown   datadog-cert.pem  minjson.py   util.py
</span><span class='line'>Rakefile    datadog.conf.example  modules.py   win32
</span><span class='line'>Vagrantfile   ddagent.py    packaging  yaml
</span><span class='line'>agent.py    dogstatsd.py    pup</span></code></pre></td></tr></table></div></figure>


<h2>API keyの取得</h2>

<p>DatadogのAPIアクセスは、API keyを使って認証しています。このkey(文字列)情報は、DD-agentの起動時に設定ファイルから読み込む仕様になっているので、設置ファイルに事前に記述しておく必要があります。</p>

<p>設定ファイルのサンプルが、dd-agent-masterディレクトリにあるので、このサンプルファイルをコピーして作業を始めます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp datadog.conf.example datadog.conf</span></code></pre></td></tr></table></div></figure>


<p>次に、設定ファイルに書き込むためのAPI keyを<a href="https://app.datadoghq.com/account/settings#api">Datadog APIs</a>ページから取得します。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-apikey.png" width="800" height="800" title="datadog apikey" alt="datadog apikey"></p>

<p>API keyの文字列が分かったところで、設定ファイルの編集をします</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi datadog.conf</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルの18行目にある、<code>api_key:</code>の後ろに先のページで取得したAPI keyをペーストします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Main]
</span><span class='line'>
</span><span class='line'># The host of the Datadog intake server to send Agent data to
</span><span class='line'>dd_url: https://app.datadoghq.com
</span><span class='line'>
</span><span class='line'># If you need a proxy to connect to the Internet, provide the settings here
</span><span class='line'># proxy_host: my-proxy.com
</span><span class='line'># proxy_port: 3128
</span><span class='line'># proxy_user: user
</span><span class='line'># proxy_password: password
</span><span class='line'>
</span><span class='line'># If you run the agent behind haproxy, you might want to set this to yes
</span><span class='line'># skip_ssl_validation: no
</span><span class='line'>
</span><span class='line'># The Datadog api key to associate your Agent's data with your organization.
</span><span class='line'># Can be found here:
</span><span class='line'># https://app.datadoghq.com/account/settings
</span><span class='line'>api_key:</span></code></pre></td></tr></table></div></figure>


<p>これで設定ファイルの追記も完了です。</p>

<h2>Agentの動作確認</h2>

<p>それでは、Agentをフォワグランドで起動してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/dd-agent-master
</span><span class='line'>python agent.py start</span></code></pre></td></tr></table></div></figure>


<p>しばらくすると、Datadogの<a href="https://app.datadoghq.com/infrastructure">Infrastrucure</a>ページ上に<strong>clanton</strong>(Galileoに設定したホスト名)というホスト名が追加されます。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-infra-clanton.png" width="800" height="800" title="datadog clanton" alt="datadog clanton"></p>

<p>ホスト名をダブルクリックすると、sysstatが収集しているGalileoの基本メトリックスがグラフ化されて表示されるはずです。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-clanton.png" width="800" height="800" title="datadog clanton" alt="datadog clanton"></p>

<p>無事グラフが表示されていることが確認できたら、<code>ctrl+C</code>でAgentを停止し、バックグラウンドで起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python agent.py start &</span></code></pre></td></tr></table></div></figure>


<h2>DogtatsDの動作確認</h2>

<p>次に、任意のメトリックスを手軽に転送するためにDogStatsを起動することにします。</p>

<p><a href="http://docs.datadoghq.com/guides/dogstatsd/">DogStatsD</a>は、NYC発祥の物販サイト<a href="https://www.etsy.com/">Etsy</a>がFOSS化している<a href="https://github.com/etsy/statsd/">Stats</a>の派生バージョンです。StatsDは、DevOpsを実践している欧米企業で各種のメトリックスを収集するために広く使われているソフトウェアです。</p>

<p>同様の目的でDogStatsDを使うことで、プログラムの中からDatadogのサービスに任意のメトリックスを簡単に転送することができます。メトリックスさえ転送できてしまえば、後はDatadogのダッシュボード機能を使って、集めたメトリックスをリアルタイムに処理&amp;可視化できるという文脈になります。</p>

<p>既に設定ファイルへのAPI keyの追記は済んでいるので、次のようにバックグランドで起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/dd-agent-master
</span><span class='line'>python dogstatsd.py start &</span></code></pre></td></tr></table></div></figure>


<p>任意のメトリックスをプログラムの中からDogStatsDを介してDatadogに送信ができたかを確認するためには、次のような簡単なプログムを書きます。</p>

<p>pythonの場合は、Datadogが提供しているDogStatsDのラッパーライブラリーがPIPにあるので次のようにインストールすることにします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/dd-agent-master
</span><span class='line'>python ez_setup.py
</span><span class='line'>easy_isntall pip
</span><span class='line'>pip install dogstatsd-python</span></code></pre></td></tr></table></div></figure>


<p>dogstatsd-pythonのインストールが無事インストールが成功したら、<strong>dogstatsd-test.py</strong>などのファイル名で次のファイルのようなpythonスクリプトを書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /usr/bin/env python
</span><span class='line'>
</span><span class='line'>from statsd import statsd
</span><span class='line'>import time
</span><span class='line'>import random
</span><span class='line'>
</span><span class='line'>def mysleep():
</span><span class='line'>    statsd.increment('myapp.testsleep')
</span><span class='line'>    sleep_time = random.uniform(0.0, 0.9)
</span><span class='line'>    # print sleep_time
</span><span class='line'>    time.sleep(sleep_time)
</span><span class='line'>
</span><span class='line'>if __name__ == "__main__":
</span><span class='line'>    while(1):
</span><span class='line'>        mysleep();</span></code></pre></td></tr></table></div></figure>


<p>pythonスクリプトが書き上がったところで実行してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python dogstatsd-test.py</span></code></pre></td></tr></table></div></figure>


<p>コンソールに大量の<em>sleep</em>文字列が出力されます。バックグラウンドではsleepが表示された回数をカウントして、一定時間ごとにそのカウント値をDatadogに転送しています。</p>

<p>先に見たDatadogの<a href="https://app.datadoghq.com/infrastructure">Infrastrucure</a>ページの<strong>clanton</strong>の行の右端にmyappという青いラベルが増えていることが確認できたら、ダブルクリックしmyappの名前スペースのメトリックスを表示するページに移動します。</p>

<p>今は、myappの名前スペースに１種類のメトリックスしかないので、次のようなグラフが表示されれば、動作確認は完了です。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-myapp-testsleep.png" width="800" height="800" title="datadog myapp testsleep" alt="datadog myapp testsleep"></p>

<h2>まとめ</h2>

<p>ここまで前編は終わりです。内容が理解できれば30分以内でできてしまうインストール作業ではないかと思います。こんな簡単な作業で、GPIOで集めた情報も可視化できるなんて素晴しいと思いませんか。後半では、GalileoのGPIO関連ライブラリーと任意のメトリックスの取り扱いに関して書いていこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry piにもDatadog Agentをインストールしてみる(前編)]]></title>
    <link href="http://jhotta.github.io/blog/2014/04/11/datadog-on-raspberry-pi-1/"/>
    <updated>2014-04-11T15:44:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/04/11/datadog-on-raspberry-pi-1</id>
    <content type="html"><![CDATA[<p>僕は、Raspberry PiではRasbianを起動している。これって所詮Linuxじゃんなんて思い妄想トランスに入ると、Datadog Agent(以後DD-agent)が動けば、GPIOの入力を簡単に可視化できるし、その情報を基に色々遊べるかな〜と思ったもした。</p>

<p>ということでDD-agentのインストール手順まとめておくことにする。インストールが終わった後(次回以降)は、python周りのライブライリーを使って、Raspberry Pi上のGPIO入出力データをDatadogに送ってみることにする。</p>

<h2>Datadog Agentのインストール</h2>

<p>DD-agentをインストールするためには、sysstatが必要です。確認の意味でもパッケージ管理コマンドを実行しインストールの有無を確認し、必要に応じてsysstatインストールしておくことにします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install sysstat</span></code></pre></td></tr></table></div></figure>


<p>次に、Datadogのアカウントを取得し、Datadogのダッシュボードにログインします。ダッシュボードが表示できたところで、<code>Integrations</code>へカーソルを合わせるとプルダウンメニューが現れるので、<code>Agent</code>を選択する。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-integrations-source.png" width="800" height="800" title="datadog agent from source" alt="datadog agent from source"></p>

<p>左側にあるメニューの一番下の<code>From Source</code>を選択すると次のような画面が表示されるでの、赤く囲った部分の一行コマンドをコピーする。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-source-install.png" width="800" height="800" title="datadog agent from source" alt="datadog agent from source"></p>

<p>このコマンドを、Raspberry Piのコンソール画面からroot権限で実行すると、次のような出力が表示されDD-agentが実行中の状態になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   184  100   184    0     0    309      0 --:--:-- --:--:-- --:--:--   859
</span><span class='line'>100 17616  100 17616    0     0  19108      0 --:--:-- --:--:-- --:--:-- 19108
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Installing Datadog Agent 4.2.1
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Creating Agent directory /root/.datadog-agent..... Done
</span><span class='line'>Creating log file /root/.datadog-agent/ddagent-install.log.....Done
</span><span class='line'>Setting up virtual environment.....Done
</span><span class='line'>Setting up setuptools and pip.....Done
</span><span class='line'>Installing tornado 2.4.1 using pip.....Done
</span><span class='line'>Downloading the latest version of the Agent from github (~2.5 MB).....Done
</span><span class='line'>Uncompressing the archive.....Done
</span><span class='line'>Configuring datadog.conf file......Done
</span><span class='line'>Setting up launching scripts.....Done
</span><span class='line'>Setting up supervisor.....Done
</span><span class='line'>Consolidating logging.....Done
</span><span class='line'>Cleaning up the installation directory.....Done
</span><span class='line'>Starting the Agent.....Done
</span><span class='line'>
</span><span class='line'>    Your Agent has started up for the first time. We're currently verifying
</span><span class='line'>    that data is being submitted. You should see your Agent show up in Datadog
</span><span class='line'>    shortly at:
</span><span class='line'>
</span><span class='line'>        https://app.datadoghq.com/infrastructure
</span><span class='line'>
</span><span class='line'>Waiting for metrics.................................
</span><span class='line'>
</span><span class='line'>    Success! Your Agent is functioning properly, and will continue to run
</span><span class='line'>    in the foreground. To stop it, simply press CTRL-C. To start it back
</span><span class='line'>    up again in the foreground, run:
</span><span class='line'>
</span><span class='line'>    cd /root/.datadog-agent
</span><span class='line'>    sh bin/agent</span></code></pre></td></tr></table></div></figure>


<p>しばらくして、Datadogのダッシュボードの<code>Infrastructure</code>タブ &ndash;> <code>raspiのホスト名</code>をクリックすると次ぎの写真みたいなグラフをDatadogのダッシュボードで見ることができます。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/dd-raspi.jpg" width="800" height="800" title="datadog dash & raspi" alt="datadog dash & raspi"></p>

<p>ここまででDD-agent自体のインストールは終了です。しかしながら、毎回コンソール画面から起動コマンドを入力するのも面倒なので、次回のポストで/etc/init.d以下に設置する起動スクリプトについて書きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datadogでサービスモニターリング [agentのインストール]]]></title>
    <link href="http://jhotta.github.io/blog/2014/04/08/install-datadog-agent/"/>
    <updated>2014-04-08T19:11:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/04/08/install-datadog-agent</id>
    <content type="html"><![CDATA[<p>世界では着実に知名度を上げてきているDatadogのモニターリング・サービスなのだが、日本語の情報がまだまだ少ないせいか、国内での盛り上がりに欠ける気がしてならない。
しかしながら、僕が2013 Pycon APACの時に使った写真主体のDatadogスライドには、定期的に閲覧が発生している。</p>

<p>数年に渡ってDatadogを見てきた僕としては、Datadogをもっと理解してもらうためには日本語の入門ポストを書くしかなと感じた。更に、いつも僕の要望に応えてくれるDatadog CTOのAlexisへの恩返しのためにもなるしね。</p>

<p>更に僕のような3流プログラマーには、収集したいメトリックスをプログラマー自身がコード内で設定できる仕組みは、New Relicの決め打メトリックス収集と違って、かゆいところに手が届く仕様になっていると思うので、この醍醐味を少しでも多くのプログラマーに知ってもらいたいというのも動機を後押ししている。</p>

<p>尚、今回Datadog agentをインストールするOSは、僕が使い慣れているUbuntuにする。基本的なサーバーメトリックスをDatadogに送信ができるようになったら、Datadogが提供しているPythonラッパーを使って、プログラム内から自分たち独自のデータをDatadogに送信しモニターリングたり、APIを使ってタイムラインにメッセージを表示したりするなど、初歩的で特徴的な使い方を紹介したいと思っている。</p>

<h2>UbuntuにDatadog agentをインストール</h2>

<p>Windows, OSX, linuxなどの一般的なOSを利用していれば、agentのインストールは非常に簡単です。</p>

<p>まず最初にDatadogのアカウントを取得します。右上隅の<code>FREE TRIAL</code>ボタンをクリックし、登録情報の入力画面に遷移します。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-top.png" width="800" height="800" title="datadog top page" alt="datadog top page"></p>

<p>一通り情報を入力し、<code>Sing up</code>ボタンをクリックし登録を完了します。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-register.png" width="800" height="800" title="datadog register page" alt="datadog register page"></p>

<p>登録が完了すると次のようなDatadogのダッシュボードが表示されます。このダッシュボードで、<code>Integrations</code>タブにカーソルを移動し<code>Agent</code>と項目を選択すると次のページが表示されます。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-os-select.png" width="800" height="800" title="datadog agent os select" alt="datadog agent os select"></p>

<p>僕は、ubuntuを使っているので、ページ内でubuntuを選択すると、ubuntu向けのDatadog agentをインストールするためのコマンドが表示されます。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/ubuntu-agent-install.png" width="800" height="800" title="datadog agent install" alt="datadog agent install"></p>

<p>インストール手順のページから上記の赤く囲った部分をコピーし、 サーバのコンソールよりroot権限で実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo DD_API_KEY={アカウントに紐づいたkey code} bash -c "$(curl -L http://dtdg.co/agent-install-ubuntu)"</span></code></pre></td></tr></table></div></figure>


<p>インストール作業が順調に作業が進んで、Datadogへデータを送信できたことが確認が取れると次のメッセージがコンソールに表示されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Waiting for metrics.................................
</span><span class='line'>
</span><span class='line'>Your Agent is running and functioning properly. It will continue to run in the
</span><span class='line'>background and submit metrics to Datadog.
</span><span class='line'>
</span><span class='line'>If you ever want to stop the Agent, run:
</span><span class='line'>
</span><span class='line'>    sudo /etc/init.d/datadog-agent stop
</span><span class='line'>
</span><span class='line'>And to run it again run:
</span><span class='line'>
</span><span class='line'>    sudo /etc/init.d/datadog-agent start</span></code></pre></td></tr></table></div></figure>


<p>コンソールにメッセージが表示されたところで、<code>Infrastructure</code>タブへ移動し、新しく追加したサーバが表示されていることを確認します。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-infrastructure.png" width="800" height="800" title="datadog infrastructure page" alt="datadog infrastructure page"></p>

<p>サーバの名前をクリックすると、そのサーバに関してDatadog agentが集めている基本メトリックスを表示しているページに遷移することができます。</p>

<p><img class="center" src="http://jhotta.github.io/images/blog-images/datadog-base-dash.png" width="800" height="800" title="datadog target infra page" alt="datadog  target infra page"></p>

<p>次回以降は、Datadog agentが収集している基本メトリックス以外の情報をDatadogに送信するための情報を解説します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trema Day #4 参加しました。]]></title>
    <link href="http://jhotta.github.io/blog/2013/11/18/trema-day-4/"/>
    <updated>2013-11-18T13:46:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2013/11/18/trema-day-4</id>
    <content type="html"><![CDATA[<h2>基本情報:</h2>

<ul>
<li><a href="http://atnd.org/event/E0020713">Trema Day #4</a></li>
</ul>


<h3>関連情報:</h3>

<ul>
<li><a href="http://osrg.github.io/ryu/">Ryu</a></li>
<li><a href="http://www.projectfloodlight.org/floodlight/">fooldlight</a></li>
<li><a href="http://trema.github.io/trema/">trema</a></li>
<li><a href="http://www.slideshare.net/stereocat55/tremafirewall">Tremaで試すfirewall</a></li>
</ul>


<h2>感想:</h2>

<p>2013年のDevOps Day Londonで、John WillisがSDNのプレゼンをしていた。彼の話しによれば、現在のSDNを取巻く環境は、彼が2005年くらいにPuppet Labs, Opscodeで顧客としていた&#8221;仮想化, クラウド, 自動化&#8221;に関する会話と酷似ていると言っていた。もしも、10年サイクルでICTに新しいトレンドが来るとすると、SDNのトレンドは既に始まっており、丁度仮想化業界にPuppetが登場する前当たりではないかともコメントしていた。</p>

<p>個人的には、計算能力とネットワーク転送力の比較をしてみると、転送力は明らかにスッペック不足のように感じる上、ネットワークエンジニア１人が管理しているネットワーク機器の数(1:120)は、オペレーションエンジニアが管理している計算ノードよりも圧倒的に少ない（FBでは、5名のシスアドミンで全体を管理）。 ”Infrastructure as Code”という概念には、当然ネットワークも自動化の対象として組み込まれないと完成しないと思う。</p>

<p>ネットワークの知識が中途半端打であったため、SDNの勉強会に参加してプレゼンで話されている単語を拾うのが精一杯であったのだが、今後も引き続き勉強していこうと思わせる分野には間違いと感じることができた。</p>

<h4>今後の行動指針:</h4>

<ul>
<li>NTTの研究所で開発されているRyuというコントローラーは、Pythonで書かれているらしくこの辺から勉強を始めたら理解出来るかな〜。</li>
<li>Goで書かれている、FOSS系のOpenFlowのコントローラーがないか探してみたのですが、みあたらなかった見当たらなかった。日本の発のものはRubyとかPythonで書かれているけど、FOSSとしての配布のことを考えるとGoのほうが便利だから、なにか出来ないか〜。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean UX 入門セミナーへ参加しました。]]></title>
    <link href="http://jhotta.github.io/blog/2013/11/13/lean-ux-seminar/"/>
    <updated>2013-11-13T19:00:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2013/11/13/lean-ux-seminar</id>
    <content type="html"><![CDATA[<h3>基本情報:</h3>

<ul>
<li><a href="http://connpass.com/event/3964/">Lean UX 入門セミナー</a></li>
</ul>


<h3>関連情報:</h3>

<ul>
<li><a href="http://www.amazon.co.jp/dp/B0074KA0A4">Lean UX: Applying Lean Principles to Improve User Experience</a></li>
<li><a href="http://www.amazon.co.jp/dp/B00F3UTIQY">リーン・スタートアップ</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873115914">Running Lean</a></li>
<li><a href="http://www.amazon.co.jp/dp/4798117552">アントレプレナーの教科書</a></li>
<li><a href="http://www.amazon.co.jp/dp/4798122971">ビジネスモデル・ジェネレーション ビジネスモデル設計書</a></li>
<li><a href="http://www.jeffgothelf.com/blog/">Jeff Gothelf Blog</a></li>
</ul>


<h2>感想:</h2>

<ul>
<li>Leanが課題解決型の手法であるために、Lean UXも課題解決型のインクリメンタルな開発に向いていると感じた。この逆に、いずれゲームチェンジャーと認められるようなUXの革命を目指すなら、別の手法の選択もありと感じた。</li>
<li>Leanの手法はイテレーションを前提としているため、外注を巻き込んでのプロジェクトの場合は、その初期の役割再確認や利害関係の再設計を念頭に置いた”場（こたつ）”づくりが、日本では特に重要と感じた。</li>
</ul>

]]></content>
  </entry>
  
</feed>
