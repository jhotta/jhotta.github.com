<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IoT | Etizolam]]></title>
  <link href="http://jhotta.github.io/blog/categories/iot/atom.xml" rel="self"/>
  <link href="http://jhotta.github.io/"/>
  <updated>2014-06-11T17:29:21+09:00</updated>
  <id>http://jhotta.github.io/</id>
  <author>
    <name><![CDATA[@jhotta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[温度センサーDHT11をRaspberry piで使う(C言語でpython拡張)]]></title>
    <link href="http://jhotta.github.io/blog/2014/05/29/consider-python-extention-gpio-usage-2/"/>
    <updated>2014-05-29T19:58:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/05/29/consider-python-extention-gpio-usage-2</id>
    <content type="html"><![CDATA[<h2>C言語を使ってPython拡張についてもう少し…</h2>

<p>今回の事例のようにC言語でPythonの拡張するには、次のような順序で作業を進めていくことなると思います。(当たり前か…)</p>

<pre><code>1. C言語でのアプリケーション開発。
2. Pythonから扱えるようにするための、C言語ソースへのラッピンコード追記 &amp; setup.pyの追加。
3. コンパイルとテスト。
</code></pre>

<p>第1,第3ステップは、一般的な開発と大差がないので今回のスコープ外ということにし第2ステップに注目して解説を進めていくことにします。</p>

<p>尚、Raspberry Piの場合は、ビルド環境も簡単にインストールできるので実機でビルドしながら開発を進めるという方法をとるのがいいと思います。C言語のソースのサイズにもよると思いますが、今回のようにセンサーを初期化する関数と計測した値を読み込む関数の2つ程度ならビルド時間も許容できるのではないかと思います。</p>

<p>(実開発はしないので、次の開発環境準備部分は読み飛ばしても大丈夫です。)</p>

<p>まずは、<code>apt-get</code>コマンドで、gcc及び一般的な開発環境をインストールします。</p>

<p><code>bash
sudo apt-get install pyhon-dev build-essential
</code></p>

<p>次に、GPIOを制御しているBCM2835のheaderファイルもインストールします。
インストール方法に関しては、<a href="http://www.airspayce.com/mikem/bcm2835/">C library for Broadcom BCM 2835 as used in Raspberry Pi</a>のドキュメントを参考に<a href="http://www.airspayce.com/mikem/bcm2835/bcm2835-1.36.tar.gz">cm2835-1.36.tar.gz</a>をDLし、次のようにビルド&amp;インストールします。</p>

<p><code>bash
tar zxvf bcm2835-1.xx.tar.gz
cd bcm2835-1.xx
./configure
make
sudo make check
sudo make install
</code></p>

<p>尚、bcm2835のheaderファイルで使われている各モジュールの詳細は<a href="http://www.airspayce.com/mikem/bcm2835/modules.html">http://www.airspayce.com/mikem/bcm2835/modules.html</a>を参照してください。(大元の資料が一番ですよね…)</p>

<p>ここれで、Raspberry Pi上でのPython拡張モジュールの開発の準備は完了です。</p>

<h2>C言語ソースへのラッピンコード追記</h2>

<p>C言語のコードを拡張していくには次の4項目を書き足すことになります。</p>

<pre><code>1. Python用のheaderファイル宣言　(#include &lt;Python.h&gt;)
2. モジュールに含む関数へのPythonラッパー　(static PyObject * モジュール名_関数名()の部分)
3. モジュール内の関数のリスト (static PyMethodDef モジュール名Methods[]の部分)
4. モジュールをイニシャライズする関数　(void initModule()の部分)
</code></pre>

<p>前回のポストで紹介したadafruitが提供してくれているリポジトリの中のAdafruit_DHT_Driver_Pythonディレクトリにある、dhtreader.cというファイルを項目に従って見ていくことにします。</p>

<h3>1. Python用のheaderファイル宣言</h3>

<p>29行目で、ヘッダーファイルの宣言をしていますね。
<code>
29 #include &lt;Python.h&gt;
</code></p>

<h3>2. モジュールに含む関数へのPythonラッパー</h3>

<p>128~132行目にかけてPython環境からC言語のbcm2835に初期化のできるようPythonのラッパーを書いていますね。</p>

<p>ここでPyObjectを定義し、モジュール名と関数名を”_”(アンダースコア)で繋げて書くことで、当該モジュールをインポートした時にPython Scriptからdhtreader.init()みたいな方法で実行できるようにしています。</p>

<p><code>
static PyObject * [モジュール名]_[関数名](PyObject *self, PyObject *args)
</code></p>

<p>Pythoラッパーの一般的な役割は、Pythonの値を受け取ってCの値に変換し、Cの適切ば関数を実行することです。そして、Cの関数が実行された後でCの値をPythonの値に戻してあげることです。</p>

<p>CからPythonには、Py_BuildValue()を使って、単体値かタプル形式のPythonオブジェクトを戻すことができます。</p>

<p><code>c
128 static PyObject *
129 dhtreader_init(PyObject *self, PyObject *args)
130 {
131     return Py_BuildValue("i", bcm2835_init());
132 }
</code></p>

<p>Py_BuildValue()では、第1引数の文字のフォーマットに合わせて、第2引数の値をオブジェクトに変換します。</p>

<p>フォーマット文字は、次の表の仕様になっています。</p>

<table>
<thead>
<tr>
<th></th>
<th> [フォーマット文字]　　 </th>
<th> [Pythonタイプ]　　　　　　 </th>
<th> [C/C++ タイプ] </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> s, s#              </td>
<td> str/unicode, len()      </td>
<td> char*(, int)</td>
</tr>
<tr>
<td></td>
<td> z, z#              </td>
<td> str/unicode/None, len() </td>
<td> char*/NULL(, int)</td>
</tr>
<tr>
<td></td>
<td> u, u#              </td>
<td> unicode, len()          </td>
<td> (Py_UNICODE*, int)</td>
</tr>
<tr>
<td></td>
<td> i                  </td>
<td> int                     </td>
<td> int</td>
</tr>
<tr>
<td></td>
<td> b                  </td>
<td> int                     </td>
<td> char</td>
</tr>
<tr>
<td></td>
<td> h                  </td>
<td> int                     </td>
<td> short</td>
</tr>
<tr>
<td></td>
<td> l                  </td>
<td> int                     </td>
<td> long</td>
</tr>
<tr>
<td></td>
<td> k                  </td>
<td> int or long             </td>
<td> unsigned long</td>
</tr>
<tr>
<td></td>
<td> I                  </td>
<td> int or long             </td>
<td> unsigned int</td>
</tr>
<tr>
<td></td>
<td> B                  </td>
<td> int                     </td>
<td> unsigned char</td>
</tr>
<tr>
<td></td>
<td> H                  </td>
<td> int                     </td>
<td> unsigned short</td>
</tr>
<tr>
<td></td>
<td> L                  </td>
<td> long                    </td>
<td> long long</td>
</tr>
<tr>
<td></td>
<td> K                  </td>
<td> long                    </td>
<td> unsigned long long</td>
</tr>
<tr>
<td></td>
<td> c                  </td>
<td> str                     </td>
<td> char</td>
</tr>
<tr>
<td></td>
<td> d                  </td>
<td> float                   </td>
<td> double</td>
</tr>
<tr>
<td></td>
<td> f                  </td>
<td> float                   </td>
<td> float</td>
</tr>
<tr>
<td></td>
<td> D                  </td>
<td> complex                 </td>
<td> Py_Complex*</td>
</tr>
<tr>
<td></td>
<td> O                  </td>
<td> (any)                   </td>
<td> PyObject*</td>
</tr>
<tr>
<td></td>
<td> S                  </td>
<td> str                     </td>
<td> PyStringObject</td>
</tr>
<tr>
<td></td>
<td> Nb                 </td>
<td> (any)                   </td>
<td> PyObject*</td>
</tr>
<tr>
<td></td>
<td> O&amp;                 </td>
<td> (any)                   </td>
<td> (any)</td>
</tr>
</tbody>
</table>


<p>先のPy_BuildValue()例では、<code>bcm2835_init()</code>の結果がint値になるので、<code>i</code>を指定してPythonオブジェクトに戻しています。</p>

<p>さて、次のブロックでは、Pythonから受け取った値をCで使える値に変換している部分に注目します。</p>

<p><code>c
134 static PyObject *
135 dhtreader_read(PyObject *self, PyObject *args)
136 {
137     int type, dhtpin;
138
139    if (!PyArg_ParseTuple(args, "ii", &amp;type, &amp;dhtpin))
140        return NULL;
141
142    float t, h;
143    int re = readDHT(type, dhtpin, &amp;t, &amp;h);
144
145    if (re == 0) {
146        return Py_BuildValue("(d,d)", t, h);
147    } else if (re == -1) {
148 #ifdef DEBUG
149        printf("sensor read failed! not enough data received\n");
150 #endif
151    } else if (re == -2) {
152 #ifdef DEBUG
153        printf("sensor read failed! checksum failed!\n");
154 #endif
156    }
157
158    return Py_BuildValue("");
159 }
</code></p>

<p>139行目の<code>PyArg_ParseTuple()</code>とある部分がPythonから渡ってきた値をCの値に置き換えています。この関数でフォーマット文字の列をつかって渡ってくる値を形式を指定し変換します。</p>

<p>計測には、C言語で書かれたソースの前半(31~91行)で指定している<code>readDHT()</code>関数を使い、結果は<code>Py_BuildValue()</code>で、floatの数値をタプルとしてPythonオブジェクにしているのが分かりますね。</p>

<p>それ以外のDEBUG用のコードは、<code>readDHT()</code>の戻り値によって、プリントディバッグできるようになっているのでしょうね…。</p>

<h3>3. モジュール内の関数のリスト</h3>

<p>次の部分の<code>static PyMethodDef DHTReaderMethods[]</code>ではモジュールをimportした後に、PythonインタプリターがそれぞれのメソッドとCの関数との対応表を提供しています。</p>

<p><code>DHTReaderMethods</code>は、関数リストを定義するための関数の名前です。モジュール名に<code>Methods</code>を続けて書きます。この名前は、次の初期化のブロックでインタープリタに伝える関数リストの指定しに使います。</p>

<p><code>c
161 static PyMethodDef DHTReaderMethods[] = {
162    {"init", dhtreader_init, METH_VARARGS,
163     "initialize dht reader"},
164    {"read", dhtreader_read, METH_VARARGS,
165     "temperature and humidity from sensor"},
166    {NULL, NULL, 0, NULL}        /* Sentinel */
167 };
</code></p>

<p>内容は、次の通りです。</p>

<p><code>
{"[Pythonメソッド名]", [Cコード内の関数名], [Pythonから渡す引数の形式指定], "[解説]"}
</code></p>

<p>尚、[Pythonから渡す引数の形式指定]の指定には、<code>METH_VARARGS</code>と<code>METH_KEYWARD</code>があります。(<code>METH_KEYWARD</code>については、<code>PyArg_ParseTupleKeywards()</code>とのセットで指定するは分かっているのですが詳細な用法が…。）</p>

<p>169行の<code>NULL</code>のは、リストの終わりを示す記号になります。</p>

<p><code>
{NULL, NULL, 0, NULL}
</code></p>

<h3>4. モジュールをイニシャライズする関数</h3>

<p>最後の部分は、モジュールがインポートされた時にPythonインタープリタによって実行される関数です。</p>

<p><code>c
169 PyMODINIT_FUNC
170 initdhtreader(void)
171 {
172    PyObject *m;
173
174    m = Py_InitModule("dhtreader", DHTReaderMethods);
175    if (m == NULL)
176        return;
177 }
</code></p>

<p><code>
Py_InitModule("[モジュール名]", [モジュール内の関数を指定したC内の関数])
</code></p>

<p>以上で、dhtreader.c内のコードでpython拡張に関わる部分はの解説は全てです。</p>

<p>試しに取得しているレポジトリーのAdafruit_DHT_Driver_Pythonディレクトリで、次のコマンドを実行すると拡張モジュールがビルドされているはずです。~/Adafruit-Raspberry-Pi-Python-Code/Adafruit_DHT_Driver_Python/build/lib.linux-armv6l-2.7以下を見てみてください。(自分で書いているわけではないので、できるに決まってますよね〜)</p>

<p><code>bash
python setup.py build
</code></p>

<h3>感想:</h3>

<p>調べてみて感じたことは、「CソースからPython拡張モジュールにするための追記自体はそれほど複雑ではない」ということです。僕にとっては、むしろ元のCソースの処理を理解し、通信の方式やバイナリをCでハンドリングする部分を理解するのに頭を使ったような気がします。</p>

<p>今後モノのインターネットが進むと、Pythonでのプロトタイピングなんてケースが多々出てくると思います。Cとの兼ね合いでちょっと困ったという時には、この手法は十分使えるのではないでしょうか。<a href="http://docs.python.jp/2/extending/extending.html">Python本家のドキュメント</a>を一読しておくと、いざという時に慌てなくすむかもしれませんね。</p>

<h2>みちくさ:</h2>

<p>僕は、未だ試していませんが、<a href="https://github.com/mubeta06/py-libbcm2835">py-libbcm2835</a>というCtypesのバインディングもあるようです。そちらも合わせて参考にしてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[温度センサーDHT11をRaspberry piで使う(始まり)]]></title>
    <link href="http://jhotta.github.io/blog/2014/05/28/consider-python-extention-fin-gpio-usage-1/"/>
    <updated>2014-05-28T12:23:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/05/28/consider-python-extention-fin-gpio-usage-1</id>
    <content type="html"><![CDATA[<h2>始まり:</h2>

<p>先日、<a href="http://www.tokyohackerspace.org/ja">Tokyo HackerSpace(以後THS)</a>で開催された<a href="http://connpass.com/event/6352/">Raspberry Pi Work Shop @ THS #3</a>に参加しました。丁度、GPIOで収集した情報で<a href="http://www.datadoghq.com/">Datadog</a>上でグラフ化して意義のあるデータの事例を探していたところなので、一石二鳥的なタイミングでした。</p>

<p><img class="center" src="/images/blog-images/ths-1.jpg" width="800" height="800" title="&lsquo;datadog integrations&rsquo; &lsquo;HackerSpace&rsquo;" ></p>

<p>ワークショップは、回路図などの難しい説明はありませんでした。渡された部品と基盤を説明に従ってハンダ付け、Raspberry Piに接続し、動作確認をする、という至ってシンプルな流れでした。ワークショップでの作業時間を考慮すると、「電子工作初心者にはこれくらい簡素化された流れが、作業/理解できる限界」とも思いました。</p>

<p>個人的には、お薦めなWorkshopだと思います。更に、THSには興味深い英語ネーティブが来ていて、英語でのコミュニケーションのひそかな練習場所にも最適な感じがしました。</p>

<p>さて、ワークショップで電子工作した温度&amp;湿度計の中身を見てみると、arduino系の電子工作で頻繁に見かける<a href="https://www.adafruit.com/products/386">DHT11 basic temperature-humidity sensor + extras</a>を使っていました。センサー周りの回路が一体化して、製品とプルアップ抵抗を回路に追加するだけというお手軽さがありがたい製品です。</p>

<p>しかし、Raspberry PiのGPIOに接続したDHT11の通信信号をPythonで読み取ろうとすると処理スピードが間に合わないらしく、DHT11からのデータの読み取りができないようです。なので、DHT系センサーとの通信をPythonから読み取るためのC言語のコードが提供されていることを知りました。</p>

<p><a href="https://github.com/adafruit/Adafruit-Raspberry-Pi-Python-Code">https://github.com/adafruit/Adafruit-Raspberry-Pi-Python-Code</a></p>

<p>リポジトリをクローンし、READMEを読んでみると次のようなサンプルコードが書かれていました。</p>

<p>Usage example:
```python
import dhtreader</p>

<p>type = 22
pin = 24</p>

<p>dhtreader.init()
print dhtreader.read(type, pin)
```</p>

<p>ワークショップでは、「C言語で書かれたプログラムをsys,osライブラリーか何かでコールしているのかな〜」くらいにしか思っていませんでした。なんと…、普通にPythonで書かれたライブラリーと同じようにインポートして使っているところを見て、C言語で書かれた<a href="http://docs.python.jp/2/extending/extending.html">Python extention</a>を使っていることに気が付きました。</p>

<p>今まで、「Python extentionとかctypeとかって、エキスパートなpythonistaが使いこなすもの」なんて思っていました。しかしハードに関わるプログラムを考える時には、僕みたいな人材でも必要になってくる知識なのだと実感しました。</p>

<h2>Python extentionを調べてみる:</h2>

<p>Python extentionを調べてみると、「Pythonのインタープリターとの間で、Pythonで書かれた他のモジュールと同じ使いように振る舞うことができる、C &amp; C++言語で記述されbuildされた、実行ファイル」らしい。更にPythonは、各プログラミング言語の中でも早い段階でユーザーによる拡張をサポートした言語とも書かれていた。</p>

<p>次のケースでこの拡張性が威力を発揮すると考えられている…。</p>

<pre><code>- Pythonのコア部分にない機能の追加
- インタープリター言語で書かれているプログラムのボトルネック部分の解決策
- Proprietary(独占)コードの隠蔽
</code></pre>

<p>次回は、DHT11に関連して、もう少しPython extensionを掘り下げてみよう。(その前に、Python extention基本について勉強してみます。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yocto Linux 自力でのコンパイル再挑戦, Interface 2014/6月号を写経]]></title>
    <link href="http://jhotta.github.io/blog/2014/05/13/compiling-yocto-for-galileo-1/"/>
    <updated>2014-05-13T18:41:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/05/13/compiling-yocto-for-galileo-1</id>
    <content type="html"><![CDATA[<p>&ldquo;お手軽ボードでホントにできる! インテルでI/O"と書かれたInterfaceによるGalileo特集号が出ていたので買ってみた。</p>

<p>組み込みに関しては何から始めていいのか全然分からなかった僕には、一通りまとまった情報として非常に参考なった。又第3部以降は、yocto Projectに関する記事がしっかり書かれていたので、実際に写経をしてみることにした。</p>

<p>その際に、読み飛ばして逆に無駄な時間を使ってしまったポイントを箇条書きしてみた。(記事をちゃんと読んでいる人は問題ないと思うけど…)</p>

<ul>
<li>VirtualBoxの仮想マシンのディクスのサイズは、最低でも<strong>32Gバイト以上</strong>を準備する。toolchaineをコンパイルするなら、雑誌の時事通り100Gバイトを用意しておく。ディスク容量不足は、コンパイル後半で分かるので大幅な時間のロスになります。(記事では「100Gバイト程度」になっている…)</li>
<li>VirtualBoxの仮想マシンのネットワークのグローバルIP接続設定と確認は、事前に済ませる。(当然か…)</li>
<li>ubuntuの配布パッケージには、<code>unzipx</code>は存在しないようなので、<code>apt-get install</code>では<code>unzip</code>に変更する。</li>
<li>wgetなどで仮想マシンへ直接DLしたい場合は、次のリンク<a href="http://downloadmirror.intel.com/23171/eng/Board_Support_Package_Sources_for_Intel_Quark_v0.7.5.7z">Board_Support_Package_Sources_for Intel_Quark_V0.7.5.7z</a>を利用する。</li>
<li>Ubuntu12.04の場合、ビルド時に渡ってくる引数が長すぎるとコンパイルエラーになる。従って<strong>必ず記事の指定通りの方法で<code>meta-clanton_v0.7.5.tar gz</code>を解凍する</strong>。(つまらないコンパイルエラーが一番時間の無駄!)</li>
<li><code>meta-clanton_v0.7.5/yocto_build/conf/local.conf</code>内の<code>BB_NUMBEWR_THERADS</code>と<code>PARALLEL_MAKE</code>の値を、<strong>仮想マシンの割当CPUコア数に合わせて変更をしておく</strong>。ビルド時に並列プロセスが重なると逆に遅くなる。(雑誌の110項右上参照)</li>
<li>ShellにPathを設定していないので、<code>source porky/oe-build-env yocto_build</code>を真面目に実行しないとbitbakeが実行できなかった。(当然かonz…)</li>
</ul>


<p>尚コンパイル環境にUbuntu12.10以降を使う場合は、田所氏の<a href="http://wiki.tokor.org/index.php?Intel%A4%CEGalileo%A4%CESD%A5%AB%A1%BC%A5%C9%CD%D1Linux%A5%A4%A5%E1%A1%BC%A5%B8%A4%F2%BA%EE%A4%EB%A1%A1-%A1%A1Galileo">「IntelのGalileoのSDカード用Linuxイメージを作る」</a>がとっても参考になります。是非参考にしてください。</p>

<p>蛇足ですが…。今回の記事を読まなかったらSDイメージのコンパイルに再挑戦することはなかったと思います。田所氏のSDイメージは、何でも簡単に手に入手できる便利なrepoがあるのという意味で、初心者には最高の選択肢だと思っています。</p>

<p><strong>これから、次の段階のカスタムイメージ作成に挑戦します~。</strong></p>

<h4>追記:</h4>

<p>Interface誌に従って、meta-toolchainをコンパイルしていたら軽く32Gのディスクスペースを使いは果たしてしまいました。後で後悔しない為にも100Gバイトのディスクスペース確保は必要!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry piにもDatadog Agentをインストールしてみる(後編)]]></title>
    <link href="http://jhotta.github.io/blog/2014/05/13/datadog-on-raspberry-pi-2/"/>
    <updated>2014-05-13T13:40:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/05/13/datadog-on-raspberry-pi-2</id>
    <content type="html"><![CDATA[<p><a href="../../../../../blog/2014/04/11/datadog-on-raspberry-pi-1/">Raspberry piにもDatadog Agentをインストールしてみる(前編)</a>でDatadog Agent(以降DD-agent)のインストールと動作は確認できました。
しかし前回のままでは、Raspberry Piの再起動時に次のコマンドでDD-Agentを起動する手作業が残っていました。</p>

<p><code>bash
sudo su
cd /root/.datadog-agent
sh bin/agent start
</code></p>

<p>ここで僕が参考にしたのが、<code>/root/.datadog-agent/bin/agnet</code>です。このスクリプトの<code>start</code>, <code>stop</code>のあたりに注目します。</p>

<p>```bash
case $action in</p>

<pre><code>start)
    if supervisor_running; then
        echo "Supervisor is already running"
        execute_if_supervisor_running start all
        exit 0
    else
        echo "Starting supervisor"
        supervisord -c $SUPERVISOR_CONF_FILE
    fi
    ;;

stop)
    execute_if_supervisor_running stop all
    exit $?
    ;;
</code></pre>

<p>```</p>

<p>…ということで、<a href="http://supervisord.org/">supervisor</a>って何だろうと思いながら、googleで検索すると<a href="http://qiita.com/yushin/items/15f4f90c5663710dbd56">「Supervisorで簡単にデーモン化」</a>みたいなtoolらしいです。そこで対応OSのinit.dでは、supervisorを使わずにDD-Agentが起動しているのかと思いubuntuでinit.d以下のdatadog-agentスクリプトを見てみましたが、ここでも、supervisorを使っていました。</p>

<p>今回は難しいことを考えずに<code>/root/.datadog-agent/bin/agnet</code>の手順を再利用するこにします。startとstopのコード部分で関数として切り出されている部分をshellのコマンドに戻しディレクトリを調整すると次のようなスクリプトになりました。start,stop,restartしかできない簡単なものですがRaspberry Piの起動時に必要な最低限の要件は満たしていると思います。(error処理の観点からは、まだまだな…)</p>

<p>```bash</p>

<h1>! /bin/sh</h1>

<h3>BEGIN INIT INFO</h3>

<h1>Provides: datadog-agent</h1>

<h1>Short-Description: Start and start datadog-agent</h1>

<h1>Description: datadog-agent is the monitoring Agent component for Datadog</h1>

<h1>Required-Start: $remote_fs $syslog</h1>

<h1>Required-Stop: $remote_fs $syslog</h1>

<h1>Default-Start: 2 3 4 5</h1>

<h1>Default-Stop: 0 1 6</h1>

<h3>END INIT INFO</h3>

<p>DD_BASE=&ldquo;/root/.datadog-agent&rdquo;
SOCK_FILE=&ldquo;/root/.datadog-agent/supervisord/agent-supervisor.sock&rdquo;</p>

<p>supervisor_running() {</p>

<pre><code>[ -e $SOCK_FILE ]
</code></pre>

<p>}</p>

<p>case $1 in</p>

<pre><code>start)
    if supervisor_running; then
        echo "Supervisor is already running"
        cd $DD_BASE &amp;&amp; venv/bin/supervisorctl -c supervisord/supervisord.conf start all
        exit 0
    else
        echo "Starting Supervisor"
        cd $DD_BASE &amp;&amp; venv/bin/supervisord -c supervisord/supervisord.conf &amp;
        exit 0
    fi
    ;;

stop)
    cd $DD_BASE &amp;&amp; venv/bin/supervisorctl -c supervisord/supervisord.conf stop all
    exit 0
    ;;

restart)
    cd $DD_BASE &amp;&amp; venv/bin/supervisorctl -c supervisord/supervisord.conf stop all
    cd $DD_BASE &amp;&amp; venv/bin/supervisorctl -c supervisord/supervisord.conf start all
    exit 0
    ;;
</code></pre>

<p>esac
exit 0
```</p>

<p>スクリプト前半のコメントアウトされている部分を詳しく知りたい人は、<a href="https://wiki.debian.org/LSBInitScripts">LSBInitScripts</a>を参考にしてください。個人的には、<code>/etc/init.d/skeleton</code>などを参考にコピペ&amp;編集することにしています。</p>

<p>startの部分でsupervisord.sockの存在確認をしているのは、<code>supervisord</code>がDD-Agentの管理をするため、Raspberry Piの起動時のみにデーモンとして起動して欲しいからです。
起動以降は<code>supervisorctl</code>によるデーモンへの管理操作依頼コマンドへと移行します。</p>

<p>このスクリプトを<code>datadog-agent</code>のファイル名で<code>/etc/init.d</code>に設置し実行権限を付与します。
<code>bash
cd /etc/init.d
vi datadog-agent # 先の内容をコピペします
chmod 755 datadog-agent
</code></p>

<p><code>datadog-agent</code>の動作の確認をします。</p>

<p>```bash
./datadog-agent start
./datadog-agent stop
./datadog-agent restart</p>

<p>```</p>

<p>最後に、<code>datadog-agent</code>を自動起動スクリプトとして登録します。</p>

<p><code>bash
update-rc.d datadog-agent defaults
</code></p>

<p>ここで、Raspbery Piを再起動します。Raspberry Piが再起動し、sshでアクセスできたら、次のコマンドを実行してみます。</p>

<p><code>bash
sudo su
cd /root/.datadog-agent
sh bin/agent info
</code></p>

<p>Raspberry Piの起動時にDD-Agentが正しく起動していれば、次のように出力されます。</p>

<h1>```bash</h1>

<h1>Collector (v 4.2.1)</h1>

<p>  Status date: 2014-05-13 15:35:31 (11s ago)
  Pid: 2168
  Platform: Linux-3.10.25+-armv6l-with-debian-7.5
  Python Version: 2.7.3
  Logs: <stderr>, syslog:/dev/log</p>

<p>  Clocks
  ======</p>

<pre><code>NTP offset: 0.0006 s
System UTC time: 2014-05-13 06:35:43.754188
</code></pre>

<p>  Paths
  =====</p>

<pre><code>conf.d: /root/.datadog-agent/agent/conf.d
checks.d: /root/.datadog-agent/agent/checks.d
</code></pre>

<p>  Hostnames
  =========</p>

<pre><code>socket-hostname: raspberrypi
ec2-hostname: raspberrypi
hostname: raspberrypi
socket-fqdn: raspberrypi
</code></pre>

<p>  Checks
  ======</p>

<pre><code>network
-------
  - instance #0 [OK]
  - Collected 8 metrics &amp; 0 events
</code></pre>

<p>  Emitters
  ========</p>

<pre><code>- http_emitter [OK]
</code></pre>

<p>===================</p>

<h1>Dogstatsd (v 4.2.1)</h1>

<p>  Status date: 2014-05-13 15:35:44 (0s ago)
  Pid: 2166
  Platform: Linux-3.10.25+-armv6l-with-debian-7.5
  Python Version: 2.7.3
  Logs: <stderr>, syslog:/dev/log</p>

<p>  Flush count: 4391
  Packet Count: 0
  Packets per second: 0.0
  Metric count: 0
  Event count: 0</p>

<p>===================</p>

<h1>Forwarder (v 4.2.1)</h1>

<p>  Status date: 2014-05-13 15:35:45 (1s ago)
  Pid: 2167
  Platform: Linux-3.10.25+-armv6l-with-debian-7.5
  Python Version: 2.7.3
  Logs: <stderr>, syslog:/dev/log</p>

<p>  Queue Size: 0 bytes
  Queue Length: 0
  Flush Count: 2901
  Transactions received: 1395
  Transactions flushed: 1395
```</p>

<p>ここまでできれば、Dogstatsdを使ってGPIOで収集したデータを<a href="http://www.datadoghq.com/">Datadoghq.com</a>へ送信できます。</p>

<p><a href="../../../../../blog/2014/04/11/datadog-on-raspberry-pi-1/">Raspberry piにもDatadog Agentをインストールしてみる(前編)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel GalileoのGPIOをpythonアプリから操作してみる(実践)]]></title>
    <link href="http://jhotta.github.io/blog/2014/04/25/controlling-gpio-on-intel-galileo-with-python-2/"/>
    <updated>2014-04-25T19:20:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/04/25/controlling-gpio-on-intel-galileo-with-python-2</id>
    <content type="html"><![CDATA[<p><a href="https://jhotta.github.io/blog/2014/04/24/controlling-gpio-in-intel-galileo-with-python/">Intel GalileoのGPIOをpythonアプリから操作してみる(基礎)</a>の続きです。GalileoのGPIOの基礎知識は、プログラムのDebugに必要です。</p>

<h2>GPOIを便利に使うためのラッパーライブラリー</h2>

<p>やるべきことの内容的を理解すれば簡単な操作ですが、毎回同じ操作をプログラム内で書くのも気が引けるので、ライブラリーがないか調べてみました。</p>

<p>Galileoには、Node.jsとPythonが既に実装されているので、これら二つのプログラミング言語について掲載します。</p>

<h3>Node.js:</h3>

<ul>
<li><a href="https://github.com/wupsbr/galileo-gpio/network">galileo-gpio</a> (Lチカでつまずいて、JSが得意でない僕は先を断念）</li>
<li><a href="https://github.com/sajirdalas/virginia-io">virginia-io</a> (未だ動作テストしていません)</li>
</ul>


<h3>Python:</h3>

<ul>
<li><a href="https://github.com/galileo-chofrock/pyGalileo">pyGalileo</a> オリジナル版</li>
<li><a href="https://github.com/jhotta/pyGalileo">pyGalileo</a> jhottaの自力バグ修正版</li>
</ul>


<p><em>Intelさん正式版のGPIOの仕様書の参照先を教えてください。jhottaの自力修正版に反映したいと思います〜。</em></p>

<h2>Pythonスクリプトの例</h2>

<p>僕は、Node.jsでのプログラミングは得意ではないので先に紹介したライブラリーを使いこなせていません。従って、ここからはpyGalileoを使って進めることにします。</p>

<h3>1. 準備</h3>

<p>これから書いていくプログラムを管理するディレクトリを作りし、pyGalileoをDLし、解凍しておきます。</p>

<p><code>bash
mkdir myapps
cd myapps
wget --no-check-certificate https://github.com/jhotta/pyGalileo/archive/master.zip
unzip master.zip
</code></p>

<p>Pythonのライブラリーとしてimportする際に、<code>-master</code>は不要なので、ディレクトリ名前を変更しておきます。</p>

<p><code>
mv pyGalileo-master/ pyGalileo
</code></p>

<h3>2. 外部からコールできるpyGalileoの関数</h3>

<p>次にpyGalileoが準備している関数を紹介します。</p>

<ul>
<li><p><strong>pinMide(pin, direction)</strong></p>

<p>  digitalピンの設定を書き込むファイルの準備と、出力又は入力でのピン利用を設定する。</p></li>
<li><p><strong>digitalWrite(pin, value)</strong></p>

<p>  digitalピンのHIGH,LOW設定。文字列"HIGH",&ldquo;LOW"をvalueに設定する。</p></li>
<li><p><strong>digitalRead(pin)</strong></p>

<p>  digitalピンのIGH,LOWを読み込む。</p></li>
<li><p><strong>analogWrite(pin, value)</strong></p>

<p>  digitalピンのPWM出力を使って、出力を制御する。0~255のintをvalueに設定する。</p></li>
<li><p><strong>analogRead(pin)</strong></p>

<p>  analogピンの値を読み込む。</p></li>
<li><p><strong>delay(msTime)</strong></p>

<p>  ミリ秒の遅延設定する。</p></li>
<li><p><strong>micros()</strong></p>

<p>  マイクロ秒単位で現在時刻を表示する。</p></li>
<li><p><strong>millis()</strong></p>

<p>  ミリ秒単位で現在時刻を表示する。</p></li>
</ul>


<h3>3. Pythonで書くGPIO経由のLチカ(Digital input &amp; LED)</h3>

<p>D4に接続したボタンスイッチで、D5に接続したLEDを点灯する例です。ボタンスイッチを押すと、LEDが点灯します。</p>

<p>プログラムを記述するためのファイルを準備します。</p>

<p><code>bash
cd myapps
vi digital.py
</code></p>

<p>digital.pyの内容は次のようになります。</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import sys
from pyGalileo import *</p>

<p>buttonPin = 4
ledPin = 5
buttonState = 0</p>

<p>def setup():
  pinMode(ledPin, OUTPUT)
  pinMode(buttonPin, INPUT)</p>

<p>def loop():
  while True:</p>

<pre><code>buttonState = digitalRead(buttonPin)
if buttonState == HIGH:
  digitalWrite(ledPin, HIGH)
else:
  digitalWrite(ledPin, LOW)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:
  setup()
  loop()
```</p>

<p>実行してみます。</p>

<p><code>bash
python ./digital.py
</code></p>

<h3>4. Pythonで書くGPIO経由のLチカ(Analog input &amp; LED)</h3>

<p>A2に接続したボリューム抵抗で、D5に接続したLEDの点灯間隔を変化させる例です。ボユームを回すと、LEDの点灯間隔が変化します。</p>

<p>プログラムを記述するためのファイルを準備します。</p>

<p><code>bash
cd myapps
vi analog.py
</code></p>

<p>analog.pyの内容は次のようになります。</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import sys
from pyGalileo import *</p>

<p>sensorPin = A2
ledPin = 5
sensorValue = 0</p>

<p>def setup():
  pinMode(ledPin, OUTPUT)</p>

<p>def loop():
  while True:</p>

<pre><code>sensorValue = analogRead(sensorPin)
digitalWrite(ledPin, HIGH)
delay(sensorValue)
digitalWrite(ledPin, LOW)
print("sensorValue:" + str(sensorValue))
delay(sensorValue)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:
  setup()
  loop()
```</p>

<p>実行してみます。</p>

<p><code>bash
python ./analog.py
</code></p>

<h3>5. Pythonで書くGPIO経由のPWM</h3>

<p>D5に接続したLEDの照度を、duty_cycle(仕事率)を変化させることで変化させる例です。LEDが照度が上り/下がる状態を繰り返します。</p>

<p>プログラムを記述するためのファイルを準備します。</p>

<p><code>bash
cd myapps
vi pwm.py
</code></p>

<p>pwm.pyの内容は次のようになります。</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import sys
from pyGalileo import *</p>

<p>led = 5
brightness = 0
fadeAmount = 5    # フェード量</p>

<p>def setup():
  pinMode(led, OUTPUT)</p>

<p>def loop():
  while True:</p>

<pre><code>analogWrite(led, brightness)
brightness = brightness + fadeAmount
# フェード方向の反転
if brightness == 0 or brightness == 255:
  fadeAmount = -fadeAmount
delay(30)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:
  setup()
  loop()
```</p>

<p>実行してみます。</p>

<p><code>bash
python ./pwm.py
</code></p>

<h3>まとめ</h3>

<p>一般的なプログラミング言語によるGalileoのGPIOの操作は、IDEで開発するのと大差がないのが提示できたと思います。</p>

<p>ポストの最初にも書いたようにGalileoのメリットは、既存のLinux資産を活かしGPIOをどのように使っていくかだと思います。
Linuxベースの開発経験を持ったエンジニアもGPIOを操作して、IoTの世界で僕らの未来を作るような開発をしてもらえると幸いです。</p>
]]></content>
  </entry>
  
</feed>
