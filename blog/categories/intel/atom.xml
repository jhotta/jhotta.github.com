<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Intel | Etizolam]]></title>
  <link href="http://jhotta.github.io/blog/categories/intel/atom.xml" rel="self"/>
  <link href="http://jhotta.github.io/"/>
  <updated>2014-04-25T22:02:52+09:00</updated>
  <id>http://jhotta.github.io/</id>
  <author>
    <name><![CDATA[@jhotta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intel GalileoのGPIOをpythonアプリから操作してみる(実践)]]></title>
    <link href="http://jhotta.github.io/blog/2014/04/25/controlling-gpio-on-intel-galileo-with-python-2/"/>
    <updated>2014-04-25T19:20:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/04/25/controlling-gpio-on-intel-galileo-with-python-2</id>
    <content type="html"><![CDATA[<p><a href="https://jhotta.github.io/blog/2014/04/24/controlling-gpio-in-intel-galileo-with-python/">Intel GalileoのGPIOをpythonアプリから操作してみる(基礎)</a>の続きです。GalileoのGPIOの基礎知識は、プログラムのDebugに必要です。</p>

<h2>GPOIを便利に使うためのラッパーライブラリー</h2>

<p>やるべきことの内容的を理解すれば簡単な操作ですが、毎回同じ操作をプログラム内で書くのも気が引けるので、ライブラリーがないか調べてみました。</p>

<p>Galileoには、Node.jsとPythonが既に実装されているので、これら二つのプログラミング言語について掲載します。</p>

<h3>Node.js:</h3>

<ul>
<li><a href="https://github.com/wupsbr/galileo-gpio/network">galileo-gpio</a> (Lチカでつまずいて、JSが得意でない僕は先を断念）</li>
<li><a href="https://github.com/sajirdalas/virginia-io">virginia-io</a> (未だ動作テストしていません)</li>
</ul>


<h3>Python:</h3>

<ul>
<li><a href="https://github.com/galileo-chofrock/pyGalileo">pyGalileo</a> オリジナル版</li>
<li><a href="https://github.com/jhotta/pyGalileo">pyGalileo</a> jhottaの自力バグ修正版</li>
</ul>


<p><em>Intelさん正式版のGPIOの仕様書の参照先を教えてください。jhottaの自力修正版に反映したいと思います〜。</em></p>

<h2>Pythonスクリプトの例</h2>

<p>僕は、Node.jsでのプログラミングは得意ではないので先に紹介したライブラリーを使いこなせていません。従って、ここからはpyGalileoを使って進めることにします。</p>

<h3>1. 準備</h3>

<p>これから書いていくプログラムを管理するディレクトリを作りし、pyGalileoをDLし、解凍しておきます。</p>

<p><code>bash
mkdir myapps
cd myapps
wget --no-check-certificate https://github.com/jhotta/pyGalileo/archive/master.zip
unzip master.zip
</code></p>

<p>Pythonのライブラリーとしてimportする際に、<code>-master</code>は不要なので、ディレクトリ名前を変更しておきます。</p>

<p><code>
mv pyGalileo-master/ pyGalileo
</code></p>

<h3>2. 外部からコールできるpyGalileoの関数</h3>

<p>次にpyGalileoが準備している関数を紹介します。</p>

<ul>
<li><p><strong>pinMide(pin, direction)</strong></p>

<p>  digitalピンの設定を書き込むファイルの準備と、出力又は入力でのピン利用を設定する。</p></li>
<li><p><strong>digitalWrite(pin, value)</strong></p>

<p>  digitalピンのHIGH,LOW設定。文字列"HIGH",&ldquo;LOW"をvalueに設定する。</p></li>
<li><p><strong>digitalRead(pin)</strong></p>

<p>  digitalピンのIGH,LOWを読み込む。</p></li>
<li><p><strong>analogWrite(pin, value)</strong></p>

<p>  digitalピンのPWM出力を使って、出力を制御する。0~255のintをvalueに設定する。</p></li>
<li><p><strong>analogRead(pin)</strong></p>

<p>  analogピンの値を読み込む。</p></li>
<li><p><strong>delay(msTime)</strong></p>

<p>  ミリ秒の遅延設定する。</p></li>
<li><p><strong>micros()</strong></p>

<p>  マイクロ秒単位で現在時刻を表示する。</p></li>
<li><p><strong>millis()</strong></p>

<p>  ミリ秒単位で現在時刻を表示する。</p></li>
</ul>


<h3>3. Pythonで書くGPIO経由のLチカ(Digital input &amp; LED)</h3>

<p>D4に接続したボタンスイッチで、D5に接続したLEDを点灯する例です。ボタンスイッチを押すと、LEDが点灯します。</p>

<p>プログラムを記述するためのファイルを準備します。</p>

<p><code>bash
cd myapps
vi digital.py
</code></p>

<p>digital.pyの内容は次のようになります。</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import sys
from pyGalileo import *</p>

<p>buttonPin = 4
ledPin = 5
buttonState = 0</p>

<p>def setup():
  pinMode(ledPin, OUTPUT)
  pinMode(buttonPin, INPUT)</p>

<p>def loop():
  while True:</p>

<pre><code>buttonState = digitalRead(buttonPin)
if buttonState == HIGH:
  digitalWrite(ledPin, HIGH)
else:
  digitalWrite(ledPin, LOW)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:
  setup()
  loop()
```</p>

<p>実行してみます。</p>

<p><code>bash
python ./digital.py
</code></p>

<h3>4. Pythonで書くGPIO経由のLチカ(Analog input &amp; LED)</h3>

<p>A2に接続したボリューム抵抗で、D5に接続したLEDの点灯間隔を変化させる例です。ボユームを回すと、LEDの点灯間隔が変化します。</p>

<p>プログラムを記述するためのファイルを準備します。</p>

<p><code>bash
cd myapps
vi analog.py
</code></p>

<p>analog.pyの内容は次のようになります。</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import sys
from pyGalileo import *</p>

<p>sensorPin = A2
ledPin = 5
sensorValue = 0</p>

<p>def setup():
  pinMode(ledPin, OUTPUT)</p>

<p>def loop():
  while True:</p>

<pre><code>sensorValue = analogRead(sensorPin)
digitalWrite(ledPin, HIGH)
delay(sensorValue)
digitalWrite(ledPin, LOW)
print("sensorValue:" + str(sensorValue))
delay(sensorValue)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:
  setup()
  loop()
```</p>

<p>実行してみます。</p>

<p><code>bash
python ./analog.py
</code></p>

<h3>5. Pythonで書くGPIO経由のPWM</h3>

<p>D5に接続したLEDの照度を、duty_cycle(仕事率)を変化させることで変化させる例です。LEDが照度が上り/下がる状態を繰り返します。</p>

<p>プログラムを記述するためのファイルを準備します。</p>

<p><code>bash
cd myapps
vi pwm.py
</code></p>

<p>pwm.pyの内容は次のようになります。</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import sys
from pyGalileo import *</p>

<p>led = 5
brightness = 0
fadeAmount = 5    # フェード量</p>

<p>def setup():
  pinMode(led, OUTPUT)</p>

<p>def loop():
  while True:</p>

<pre><code>analogWrite(led, brightness)
brightness = brightness + fadeAmount
# フェード方向の反転
if brightness == 0 or brightness == 255:
  fadeAmount = -fadeAmount
delay(30)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:
  setup()
  loop()
```</p>

<p>実行してみます。</p>

<p><code>bash
python ./pwm.py
</code></p>

<h3>まとめ</h3>

<p>一般的なプログラミング言語によるGalileoのGPIOの操作は、IDEで開発するのと大差がないのが提示できたと思います。</p>

<p>ポストの最初にも書いたようにGalileoのメリットは、既存のLinux資産を活かしGPIOをどのように使っていくかだと思います。
Linuxベースの開発経験を持ったエンジニアもGPIOを操作して、IoTの世界で僕らの未来を作るような開発をしてもらえると幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel GalileoのGPIOをpythonアプリから操作してみる(基礎)]]></title>
    <link href="http://jhotta.github.io/blog/2014/04/24/controlling-gpio-in-intel-galileo-with-python/"/>
    <updated>2014-04-24T23:03:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/04/24/controlling-gpio-in-intel-galileo-with-python</id>
    <content type="html"><![CDATA[<p>Intel Galileo(以降、Galileo)は、<a href="http://www.arduino.cc/">arduino</a>互換のGPIOを装備しています。このGPIOを使うためにIntel社が準備してくれているのがGalileo用の<a href="https://communities.intel.com/docs/DOC-22226">Arduino IDE</a>ということになります。</p>

<p>しかし、僕が愛用しているSDイメージではこのIDEと通信できない。更に僕は、Galileoの優位性はLinuxの有志が提供してくれている各種ソフトとarduino互換GPIOの連携と勝手に思い込んでいるので、IDEを使わずにGPIOの操作ができないかと調べた結果をまとめてみます。</p>

<h2>Galileo GPIOの仕様もどき</h2>

<p>Intel社みたいな大手企業なら何処かに正式な仕様書が存在していると思うのだが、googleで検索しても僕はそれらしきものを見つけることができなかった。しかしながら、次のSergey氏のサイトに書かれている内容を参照するとGPIOの動作が理解できます。</p>

<p><a href="http://www.malinov.com/Home/sergey-s-blog/intelgalileo-programminggpiofromlinux">Intel Galileo &ndash; Programming GPIO From Linux</a></p>

<p><a href="https://www.yoctoproject.org/">Yocto Project</a>のLinuxで動作しているGalileoも、<a href="http://www.raspberrypi.org/">Raspberry Pi</a>等と同じように、特定の場所のファイルに対し設定内容を書き込めば、GPIOの目的ピンに意図している設定は反映されるようになっています。</p>

<p>GPIOの設定内容を書き込むファイルの場所は次のディレクトリになります。</p>

<p><code>bash
cd /sys/class/
</code></p>

<p>まず、ディレクトリ移動して内容を見てみましょう。</p>

<p><code>bash
root@clanton:/sys/class# ls
backlight cpuid      input     net       scsi_generic   tty
bdi   dma      mdio_bus  pci_bus       scsi_host      udc
block   firmware     mem       power_supply  spi_host     uio
bluetooth gpio       misc      pwm       spi_master     vc
bsg   i2c-adapter  mmc_host  rfkill      spi_transport  vtconsole
cln_esram_test  i2c-dev      msr       scsi_device   spidev
cln_imr_test  ieee80211    mtd       scsi_disk     thermal
</code></p>

<p>GPIOピンの設定は、gpioディレクトリとpwmディレクトリ以下にあるファイルに書き込み操作をすることによって行います。</p>

<p>各ピンの設定詳細に関しては、先に紹介した<a href="http://www.malinov.com/Home/sergey-s-blog/intelgalileo-programminggpiofromlinux">Sergey氏のサイト</a>の図表を参照してください。</p>

<h2>コンソール入力でGPIOピンを操作してみる</h2>

<h3>1.Digital 出力</h3>

<p>digital 5ピンを出力として使用するための設定をしてみます。</p>

<p>Galileoボード上のdigital 5ピンは、gpio番号としては17番に対応してることを先に紹介した図表で確認します。
その上で、<code>export</code>ファイルに<code>17</code>を書き込みます。</p>

<p><code>bash
echo -n "17" &gt; /sys/class/gpio/export
</code></p>

<p>書き込みが完了すると、<code>gpio17</code>ディレクトリが生成されます。このディレクトリ内に存在している各ファイルに設定を書き込んでいきます。</p>

<p>今回は、出力設定なので<code>direction</code>ファイルに<code>out</code>(出力)と書き込みます。</p>

<p><code>bash
echo -n "out" &gt; /sys/class/gpio/gpio17/direction
</code></p>

<p>信号の出力モードを設定します。LEDを付けるなどの一般用途では<code>strong</code>を使います。詳細に関しては、先のサイトを参照してください。</p>

<p><code>bash
echo -n "strong" &gt; /sys/class/gpio/gpio17/drive
</code></p>

<p>ピン出力のHIGH, LOWは、<code>value</code>ファイルへ<code>1</code>と<code>0</code>を書き込むことで操作します。1=HIGH, 0=LOWです。</p>

<p><code>bash
echo -n "1" &gt; /sys/class/gpio/gpio17/value
</code></p>

<p>digital 5ピンにLEDを接続すれば、Lチカができます。</p>

<h3>2.Digital 入力</h3>

<p>digital 5ピンを入力として使用するための設定をしてみます。</p>

<p>Galileoボード上のdigital 5ピンは、gpio番号としては17番に対応してることを先に紹介した図表で確認します。
その上で、<code>export</code>ファイルに<code>17</code>を書き込みます。</p>

<p><code>bash
echo -n "17" &gt; /sys/class/gpio/export
</code></p>

<p>書き込みが完了すると、<code>gpio17</code>ディレクトリが生成されます。このディレクトリ内に存在している各ファイルに設定を書き込んでいきます。</p>

<p>今回は、入力設定なので<code>direction</code>ファイルに<code>in</code>(入力)と書き込みます。</p>

<p><code>bash
echo -n "in" &gt; /sys/class/gpio/gpio17/direction
</code></p>

<p>信号の出力モードを設定します。先の資料には、<code>strong</code>で問題と書かれていますが、僕の手元の環境では再現できませんでした。<strong>僕の環境では、<code>hiz</code>の設定をしたときのみです。</strong>従って、ここでは、<code>hiz</code>を書き込みます。</p>

<p><code>bash
echo -n "hiz" &gt; /sys/class/gpio/gpio17/drive
</code></p>

<p><code>value</code>ファイルに、HIGH=1, LOW=0で値が書かれているのを確認してみます。</p>

<p><code>bash
cat /sys/class/gpio/gpio17/value
</code></p>

<p>digital 5ピンにボタンスイッチ等を接続し、ON/OFFしファイルを状態をcatしてみましょう。</p>

<h3>3.Analog 出力</h3>

<p>digital 5ピンをPWM出力として使用するための設定をしてみます。</p>

<p>次の4ステップは、Digital出力を準備するのと同じです。</p>

<p><code>bash
echo -n "17" &gt; /sys/class/gpio/export
</code></p>

<p><code>bash
echo -n "out" &gt; /sys/class/gpio/gpio17/direction
</code></p>

<p><code>bash
echo -n "strong" &gt; /sys/class/gpio/gpio17/drive
</code></p>

<p><em>PWMの設定する前は、該当ピンの出力が確実にLOWでなっているように設定しておきます。</em></p>

<p><code>bash
echo -n "0" &gt; /sys/class/gpio/gpio17/value
</code></p>

<p>PWM出力の準備を始めます。Digital 5ピンのPWMチャネルが5番であることを、先の対応図表で確認します。
(以下の各コマンド内の<code>5</code>は、PWMチャネル番号です。)</p>

<p><code>/sys/class/pwm/pwmchip0/export</code>に対して、pwmチャネル番号<code>5</code>を書き込みます。</p>

<p><code>bash
echo -n "5" &gt; /sys/class/pwm/pwmchip0/export
</code></p>

<p><code>/sys/class/pwm/pwmchip0/enable</code>に対して、<code>1</code>(有効)を書き込みます。
<code>1</code>=有効,<code>0</code>=無効です。</p>

<p><code>bash
echo -n "1" &gt; /sys/class/pwm/pwmchip0/pwm5/enable
</code></p>

<p>PWMの周期時間をナノ秒で<code>/sys/class/pwm/pwmchip0/pwm5/period</code>へ書き込みます。<code>1900000</code>は、IDEがPWMに設定していた周期時間です。</p>

<p><code>bash
echo -n "1900000" &gt; /sys/class/pwm/pwmchip0/pwm5/period
</code></p>

<p>PWMのHIGHの時間をナノ秒で<code>/sys/class/pwm/pwmchip0/pwm5/duty_cycle</code>へ書き込みます。<code>800000</code>は、50%の仕事率を設定しています。</p>

<p><code>bash
echo -n "800000" &gt; /sys/class/pwm/pwmchip0/pwm5/duty_cycle
</code></p>

<p>一通りPWMの設定が済んだところで、<code>/sys/class/gpio/gpio17/value</code>をHIGHにします。(PWMが動作している間に<code>value</code>をcatしてみると、<code>1</code>か<code>0</code>が出力されます。)</p>

<p><code>bash
echo -n "1" &gt; /sys/class/gpio/gpio17/value
</code></p>

<p>digital 5ピンにLEDを接続すれば、LEDが50%の照度で点灯ができます。
<code>duty_cycle</code>の数値を変更すると、LEDの照度が変わります。</p>

<h3>4.Analog 入力</h3>

<p>Analog A0ピンを出力として使用するための設定をしてみます。</p>

<p>Galileoボード上のanalog A0ピンは、複数の機能をMUXで切り替えるようになっています。
gpio番号としては37番に書き込みをすることによって、A0ピンをAD7298 ADCのICに接続することができます。</p>

<p>今までと同じように、<code>export</code>ファイルに<code>37</code>を書き込みます。</p>

<p><code>bash
echo -n "37" &gt; /sys/class/gpio/export
</code></p>

<p>MUXを設定するための<code>gpio37/direction</code>を<code>out</code>(出力)に設定します。</p>

<p><code>bash
echo -n "out" &gt; /sys/class/gpio/gpio37/direction
</code></p>

<p><code>gpio37/value</code>を、<code>0</code>(LOW)にしAD7298 ADCにA0入力を接続します。</p>

<p><code>bash
echo -n "0" &gt; /sys/class/gpio/gpio37/value
</code></p>

<p><code>/sys/bus/iio/devices/iio\:device0/in_voltage0_raw</code>をcatすることで、A0入力を読み取ります。</p>

<p><code>bash
cat /sys/bus/iio/devices/iio\:device0/in_voltage0_raw
</code></p>

<p>ボリューム抵抗等をA0に接続し、catを繰り返すと数値が変化していることが確認できます。</p>

<h3>5.使用したピンの後処理</h3>

<p>ピンの利用解除は、次に示すようにgpioディレクトリかpwmのディレクトリの unxport ファイルに、該当GPIO番号かPWMチャネル番号の書き出して処理します。</p>

<p><code>bash
echo -n "17" &gt; /sys/class/gpio/unexport
</code></p>

<p><code>bash
echo -n "5" &gt; /sys/class/pwm/pwmchip0/unexport
</code></p>

<h2>まとめ</h2>

<p>arduino等の組み込みプログラムと違って、registerの特定番地をHIGH,LOW設定すのではなく、ファイルへの書き込みのみでGPIOを操を確認できたと思います。そして、一般的なプログラミング言語からもGPIOが簡単に操作できる理由が提示できたと思います。次は、この原理をベースにしたライブラリー使って、実際のプログラムを書いてみることにします。</p>

<p>この続きは<a href="https://jhotta.github.io/blog/2014/04/25/controlling-gpio-on-intel-galileo-with-python-2/">Intel GalileoのGPIOをpythonアプリから操作してみる(実践)</a>です。合わせて、参照していただけると幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datadog agentをIntel Galileoで動かす(前編)]]></title>
    <link href="http://jhotta.github.io/blog/2014/04/14/datadog-agent-for-intel-galileo-1/"/>
    <updated>2014-04-14T16:54:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/04/14/datadog-agent-for-intel-galileo-1</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/blog-images/intel_galileo.jpg" width="300" height="300" title="&lsquo;intel galileo&rsquo; &lsquo;intel galileo&rsquo;" ></p>

<p>Datadog agent(以後DD-agent)が、Raspberry Piであっさり動いてしまったので、流行のIntel Galileo(以降Galileo)でもあっさり動くのではと思い挑戦してみました。
結果から言うと<strong>「問題なく出来ます」</strong>、しかし、Raspberry Pi(Rasbian)の時のように、Datadogが用意してくれている１行コマンド行を実行すれば完成ということには成りませんでした。</p>

<p>こういう時こそ情報の供給がだいじだと思うのでインストール方法を書き残しておくとにします。尚今回は、DD-agentとDogtatsDを起動させ、メトリックスをDatadogに送信しするところまでの手順を書きます。これらのスクリプトをGalileoの起動時に自動で起動する方法やGPIOからの情報を読み込み送信する方法は、後編で書こうと思います。</p>

<h2>起動用のSDイメージについて</h2>

<p>個人的に利用頻度が最も多い<a href="http://wiki.tokor.org/%20Tokoro's%20Tech-Note">Tokoro&rsquo;s Tech-Note</a>で公開されている<a href="http://storage.tokor.org/pub/galileo/images/full">SDフルイメージ</a>を利用します。</p>

<p>このイメージの特徴は、arduino IDEは使えなくなるものの、linux系のlibでちょっとこれがあると便利かもというものがrepoから簡単に入手できることです。(Tokoro氏の善意に感謝します。)</p>

<p>先の<a href="http://storage.tokor.org/pub/galileo/images/full">SDフルイメージ</a>をPCにダウンロードし解凍後、fat32でフォーマットした4G SDカート(4G以上のSDの場合は、4Gのパーティションを作成してください)に書き込めば、起動用のSDカードの準備は完了です。</p>

<p>以下が解凍した<a href="http://storage.tokor.org/pub/galileo/images/full">SDフルイメージ</a>の中身です。
<img class="center" src="/images/blog-images/SD-full-list.png" width="800" height="800" title="&lsquo;解凍したSDの中身&rsquo; &lsquo;SD full soft list&rsquo;" ></p>

<p>準備ができたSDカードをGalileに差し込んで、LANケーブルと電源を指すと<a href="https://www.yoctoproject.org/%20yocto">Yocto linux</a>が起動してきます。LAN(eth0)は、IP addressを自動で取得する設定に成っているので、Galileoを接続したネットワークにDHCPサーバーが存在している必要があります。IP addressは、OSが起動したのを見計らってIPスキャナー<a href="https://itunes.apple.com/jp/app/lanscan/id472226235?mt=12%20LanSacan">LanScan</a>などでIntel GalileoのMACアドレスを探してIP addressを確認します。MACアドレスの情報は、LANコネクター口の上にシールで張られています。</p>

<p>OSが起動しIP addressが分かったら、sshでGalileoに接続していきます。</p>

<p><code>
$ ssh root@X.X.X.X
</code></p>

<p>rootにはpasswordは設定されてないので、sshの接続手順が完了すると、一気に管理者権限のコンソールが表示されます。</p>

<p><code>
The authenticity of host '192.168.8.171 (192.168.8.171)' can't be established.
RSA key fingerprint is 4d:5e:57:43:b0:02:6e:f3:ae:3c:1e:2c:7a:55:f5:4b.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'X.X.X.X' (RSA) to the list of known hosts.
root@clanton:~#
</code></p>

<h2>DD-agent起動に足りないPackageのインストール</h2>

<p>sshで接続ができたところで、まず最初にする作業は、Tokoroさんが提供してくれているPackageをopkgコマンドでインストールするためのrepo情報の追記です。</p>

<p>既にrepo情報が追記された設定ファイルも公開されているので、下記のコマンドを実行して既存のrepo設定ファイルをTokoroさんのrepoの設定情報が記載された設定ファイルに置き換えます。</p>

<p><code>
wget http://storage.tokor.org/pub/galileo/packages/opkg.conf -O /etc/opkg/opkg.conf
</code></p>

<p>詳細に関しては、<a href="http://wiki.tokor.org/index.php?Intel%A4%CEGalileo%A4%C7%A5%D1%A5%C3%A5%B1%A1%BC%A5%B8%A5%DE%A5%CD%A1%BC%A5%B8%A5%E3opkg%A4%F2%BB%C8%A4%A6%A1%A1-%A1%A1Galileo">「IntelのGalileoでパッケージマネージャopkgを使う」</a>を参照してください。</p>

<p>次に、Package情報を更新し、新しいバージョンのパッケージがあるものは最新に入れ替えておくことにします。</p>

<p><code>
opkg update
opkg upgrade
</code></p>

<p>起動時にDateコマンドで毎回時間を設定するのは非常に手間なので、簡単に時間が設定されるようにします。自動で時間を設定してくれるntpdateをPackageインストールします。</p>

<p><code>
opkg install ntpdate
ntpdate ntpdate ntp.nict.jp
</code></p>

<p>次に、ntpdもインストールして設定しておきます。</p>

<p><code>
opkg install ntp
</code></p>

<p>ntpの設定ファイルを編集します。</p>

<p><code>
vi /etc/ntp.conf
</code></p>

<p><em># server time.server.example.com</em>と書かれている行をコメントアウトし、次のように公開されているntpサーバー名を記載します。</p>

<p>```</p>

<h1>server time.server.example.com</h1>

<p>server ntp.nict.jp
server 0.asia.pool.ntp.org
```</p>

<p>次に、システムの状態を定期的に監視するためのsysstatをPackageインストールします。</p>

<p><code>
opkg install sysstat
</code></p>

<p>DD-agentを起動するためのPackageの追加インストールは、これで終了です。</p>

<h2>DD-agentのダウンロード</h2>

<p>OSの準備ができたので、DD-agentをGithubから取得し、Galileoに設置します。
Githubのサイトで、<strong>DD-agent</strong>を検索すると、次のような検索結果が表示されます。</p>

<p><img class="center" src="/images/blog-images/github-dd-agent.png" width="800" height="800" title="&lsquo;github dd-agent&rsquo; &lsquo;github dd-agent&rsquo;" ></p>

<p>赤枠で囲った項目をダブルクリックして、Datadogが管理しているdd-agentのページに移動します。</p>

<p><img class="center" src="/images/blog-images/github-dd-agent-dl.png" width="800" height="800" title="&lsquo;github dd-agent&rsquo; &lsquo;github dd-agent&rsquo;" ></p>

<p><code>Download ZIP</code> ボタンを見つけ、右クリックを使ってリンク先URLをクリップボードに保存ます。</p>

<p>Galileoのwgetコマンドでは、githubのCAの情報がうまく処理でないようなので<em>&mdash;no-check-certificate</em>をコマンドオプションに追記し実行します。</p>

<p><code>
wget --no-check-certificate https://github.com/DataDog/dd-agent/archive/master.zip
</code></p>

<p>ダウンロードが終わったらファイルを解凍し、起動の準備に入ります。</p>

<p><code>
unzip master.zip
</code></p>

<p>master.zipは、<code>dd-agent-master</code>というディレクトリ以下に展開されます。</p>

<p><code>
cd dd-agent-master
</code></p>

<p>ディレクトリを<code>ls</code>で表示してみると次の様になっているはずです。</p>

<p><code>
root@clanton:~/dd-agent-master# ls
CHANGELOG.md    aggregator.py   dogstream  requirements.txt
LICENSE     checks    emitter.py   resources
LICENSE-boto    checks.d    ez_setup.py  setup.py
LICENSE-httplib2  compat    graphite.py  supervisord.dev.conf
LICENSE-minjson   conf.d    httplibproxy.py  tests
LICENSE-ntplib    config.py   jmxfetch.py  transaction.py
MANIFEST.in   daemon.py   migration.py   urllib2proxy.py
README.markdown   datadog-cert.pem  minjson.py   util.py
Rakefile    datadog.conf.example  modules.py   win32
Vagrantfile   ddagent.py    packaging  yaml
agent.py    dogstatsd.py    pup
</code></p>

<h2>API keyの取得</h2>

<p>DatadogのAPIアクセスは、API keyを使って認証しています。このkey(文字列)情報は、DD-agentの起動時に設定ファイルから読み込む仕様になっているので、設置ファイルに事前に記述しておく必要があります。</p>

<p>設定ファイルのサンプルが、dd-agent-masterディレクトリにあるので、このサンプルファイルをコピーして作業を始めます。</p>

<p><code>
cp datadog.conf.example datadog.conf
</code></p>

<p>次に、設定ファイルに書き込むためのAPI keyを<a href="https://app.datadoghq.com/account/settings#api">Datadog APIs</a>ページから取得します。</p>

<p><img class="center" src="/images/blog-images/datadog-apikey.png" width="800" height="800" title="&lsquo;datadog apikey&rsquo; &lsquo;datadog apikey&rsquo;" ></p>

<p>API keyの文字列が分かったところで、設定ファイルの編集をします</p>

<p><code>
vi datadog.conf
</code></p>

<p>設定ファイルの18行目にある、<code>api_key:</code>の後ろに先のページで取得したAPI keyをペーストします。</p>

<p>```
[Main]</p>

<h1>The host of the Datadog intake server to send Agent data to</h1>

<p>dd_url: <a href="https://app.datadoghq.com">https://app.datadoghq.com</a></p>

<h1>If you need a proxy to connect to the Internet, provide the settings here</h1>

<h1>proxy_host: my-proxy.com</h1>

<h1>proxy_port: 3128</h1>

<h1>proxy_user: user</h1>

<h1>proxy_password: password</h1>

<h1>If you run the agent behind haproxy, you might want to set this to yes</h1>

<h1>skip_ssl_validation: no</h1>

<h1>The Datadog api key to associate your Agent&rsquo;s data with your organization.</h1>

<h1>Can be found here:</h1>

<h1><a href="https://app.datadoghq.com/account/settings">https://app.datadoghq.com/account/settings</a></h1>

<p>api_key:
```</p>

<p>これで設定ファイルの追記も完了です。</p>

<h2>Agentの動作確認</h2>

<p>Agentを起動する前にdatadog関連のデーモンがlogを出力する先のディレクトリーを準備しておきます。</p>

<p><code>
mkdir /var/log/datadog
</code></p>

<p>それでは、Agentを起動してみます。</p>

<p><code>
cd ~/dd-agent-master
python agent.py start
</code></p>

<p>しばらくすると、Datadogの<a href="https://app.datadoghq.com/infrastructure">Infrastrucure</a>ページ上に<strong>clanton</strong>(Galileoに設定したホスト名)というホスト名が追加されます。</p>

<p><img class="center" src="/images/blog-images/datadog-infra-clanton.png" width="800" height="800" title="&lsquo;datadog clanton&rsquo; &lsquo;datadog clanton&rsquo;" ></p>

<p>ホスト名をダブルクリックすると、sysstatが収集しているGalileoの基本メトリックスがグラフ化されて表示されるはずです。</p>

<p><img class="center" src="/images/blog-images/datadog-clanton.png" width="800" height="800" title="&lsquo;datadog clanton&rsquo; &lsquo;datadog clanton&rsquo;" ></p>

<h2>DogtatsDの動作確認</h2>

<p>次に、任意のメトリックスを手軽に転送するためにDogStatsを起動することにします。</p>

<p><a href="http://docs.datadoghq.com/guides/dogstatsd/">DogStatsD</a>は、NYC発祥の物販サイト<a href="https://www.etsy.com/">Etsy</a>がFOSS化している<a href="https://github.com/etsy/statsd/">StatsD</a>のプロトコルを利用した派生バージョンです。StatsDは、DevOpsを実践している欧米企業で各種のメトリックスを収集するために広く使われているソフトウェアです。</p>

<p>同様の目的でDogStatsDを使うことで、プログラムの中からDatadogのサービスに任意のメトリックスを簡単に転送することができます。メトリックスさえ転送できてしまえば、後はDatadogのダッシュボード機能を使って、集めたメトリックスをリアルタイムに処理&amp;可視化できるという文脈になります。</p>

<p>既に設定ファイルへのAPI keyの追記は済んでいるので、次のように起動します。</p>

<p><code>
cd ~/dd-agent-master
python dogstatsd.py start
</code></p>

<p>任意のメトリックスをプログラムの中からDogStatsDを介してDatadogに送信ができたかを確認するためには、次のような簡単なプログムを書きます。</p>

<p>pythonの場合は、Datadogが提供しているDogStatsDのラッパーライブラリーがPIPにあるので次のようにインストールすることにします。</p>

<p><code>
cd ~/dd-agent-master
python ez_setup.py
easy_isntall pip
pip install dogstatsd-python
</code></p>

<p>dogstatsd-pythonのインストールが無事インストールが成功したら、<strong>dogstatsd-test.py</strong>などのファイル名で次のファイルのようなpythonスクリプトを書きます。</p>

<p>```python</p>

<h1>! /usr/bin/env python</h1>

<p>from statsd import statsd
import time
import random</p>

<p>def mysleep():</p>

<pre><code>statsd.increment('myapp.testsleep')
sleep_time = random.uniform(0.0, 0.9)
print "sleep: %f" % sleep_time
time.sleep(sleep_time)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>while(1):
    mysleep();
</code></pre>

<p>```</p>

<p>pythonスクリプトが書き上がったところで実行してみます。</p>

<p><code>
python dogstatsd-test.py
</code></p>

<p>コンソールに大量の<em>sleep</em>文字列が出力されます。バックグラウンドではsleepが表示された回数をカウントして、一定時間ごとにそのカウント値をDatadogに転送しています。</p>

<p>先に見たDatadogの<a href="https://app.datadoghq.com/infrastructure">Infrastrucure</a>ページの<strong>clanton</strong>の行の右端にmyappという青いラベルが増えていることが確認できたら、ダブルクリックしmyappの名前スペースのメトリックスを表示するページに移動します。</p>

<p>今は、myappの名前スペースに１種類のメトリックスしかないので、次のようなグラフが表示されれば、動作確認は完了です。</p>

<p><img class="center" src="/images/blog-images/datadog-myapp-testsleep.png" width="800" height="800" title="&lsquo;datadog myapp testsleep&rsquo; &lsquo;datadog myapp testsleep&rsquo;" ></p>

<h2>まとめ</h2>

<p>ここまでで前編は終わりです。内容が理解できれば30分以内でできてしまうインストール作業ではないかと思います。こんな簡単な作業で、GPIOで集めた情報も可視化できるなんて素晴しいと思いませんか。後半では、GalileoのGPIO関連ライブラリーと任意のメトリックスの取り扱いに関して書いていこうと思います。</p>

<ul>
<li>2014/04/18 ntpdate、及びntpの設定に関連する記述を変更しました。</li>
</ul>

]]></content>
  </entry>
  
</feed>
