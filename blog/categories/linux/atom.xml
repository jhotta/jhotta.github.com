<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Etizolam]]></title>
  <link href="http://jhotta.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jhotta.github.io/"/>
  <updated>2015-03-01T00:05:59+09:00</updated>
  <id>http://jhotta.github.io/</id>
  <author>
    <name><![CDATA[@jhotta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DockerHubとlibswarmの提供で、エコシステム基盤の定義?]]></title>
    <link href="http://jhotta.github.io/blog/2014/06/13/what-i-think-about-libswarm-1/"/>
    <updated>2014-06-13T13:29:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/06/13/what-i-think-about-libswarm-1</id>
    <content type="html"><![CDATA[<p><a href="http://www.dockercon.com/">dockercon14</a>が終わって、僕が注目したいのは、<a href="https://hub.docker.com/">DockerHub</a>と<a href="https://github.com/docker/libswarm">Libswarm</a>です。</p>

<p>僕は、LibswarmとDockerHubの関係に関してgitとgithubの関係に似ているような気がしています。<a href="http://www.publickey1.jp/blog/14/docker_hubdockerdocker.html">[速報]Docker Hub発表。ビルド、テスト、デプロイの自動化、Dockerイメージの管理など。Dockerのプラットフォーム化を推進(Publickey)</a>にも書かれているように、<strong>&ldquo;実行可能なアプリケーションのDockerイメージを管理する機能などを備えたサービス&rdquo;</strong>なんだとすると、そのDockerイメージをCLIやプログラム内から使い倒すの必要なのがlibswarmではないかと思います。</p>

<p><img class="right" src="/images/blog-images/Docker_the_road_ahead.png" width="300" height="300" title="&lsquo;Docker the road ahead&rsquo; &lsquo;Docker the road ahead&rsquo;" ></p>

<p>DockerHub&amp;libswarm共に未だ発表されて間もないしので検索してもあまり情報が見つからないのですが、次の幾つかのサイトを見ていると、新しい時代の幕開けが目の前で始まっている感じがし、ワクワクしてしかたがない。</p>

<ul>
<li><a href="http://www.slideshare.net/shykes/docker-the-road-ahead">Docker: the road ahead</a></li>
<li><a href="https://www.youtube.com/watch?v=a_YbxWbHgQA">Orchard + libswarm demo from DockerCon</a></li>
<li><a href="http://www.activestate.com/blog/2014/06/libswarm-docker-orchestration-announced">libswarm &ndash; Docker Orchestration Announced</a></li>
<li><a href="http://java.dzone.com/articles/libswarm-docker-orchestration?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+javalobby%2Ffrontpage+%28Javalobby+%2F+Java+Zone%29">libswarm &ndash; Docker Orchestration Announced</a></li>
</ul>


<p>そして<a href="http://www.publickey1.jp/blog/14/docker_hubdockerdocker.html">Publickeyの記事</a>のまとめで、<strong>&ldquo;ここから見えてくるのは、Docker社のチャレンジは単にLinuxのコンテナ技術を製品化するだけでなく、これまで主にOSベンダーが築いてきたOSを中心とした開発ツールやアプリケーションベンダーとのエコシステムを、コンテナ型仮想化技術を核に再構築しようとしているところです。いまのDockerの勢いを見ていると、このエコシステムの構築とDockerのプラットフォーム化の実現は一定のに説得力があるように思います。&rdquo;</strong>って、非常に意味のある言葉のような気がしています。(僕は、"OSベンダー"を、"インフラ提供者"と理解してまとめに共感しています。)</p>

<p>githubエコシステムができたことで”コードに対する価値感”や”開発の進め方”が大きく変わったように、<strong>Dockerエコシステム</strong>が形成されていくことで、開発運用の方法が根底から変わっていくのではないかと思います。</p>

<p>そしてクラウドインフラの利用者側として、僕が今感じているのは、「今までのやり方は時代遅れになる、できるところから地道に次の準備を始めるしかない!」ってことかなぁと思う。</p>

<pre><code>- 「時代遅れが、通用しない」とは言っておりません。
- インフラ供給者側の視点は、怖くて書けません…。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コンテナ化したDatadog agentを使ってDockerのモニターリング&管理]]></title>
    <link href="http://jhotta.github.io/blog/2014/06/11/docker-ize-datadog-with-agent-containers/"/>
    <updated>2014-06-11T11:31:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/06/11/docker-ize-datadog-with-agent-containers</id>
    <content type="html"><![CDATA[<p>さすがに<a href="http://www.dockercon.com/">dcokercon14</a>が開催されているということもあって、Dockerネタで2日連続で記事を掲載してきたか…。
ということで、この記事も日本語訳してみることにする。(超訳っぽいところは、寛大な心をもって読んでください。)</p>

<p>尚この記事を読む前にDcokerのドキュメントの<a href="http://docs.docker.com/reference/run/#runtime-privilege-and-lxc-configuration">Runtime Privilege and LXC Configuration</a>の部分に目を通しておくと良いかもしれない。Datadog agentをインストールするコンテナは、このPrivilege機能を使って他のコンテナの情報にアクセスしていると思う。</p>

<h2>Docker-ize Datadog with agent containers</h2>

<p><a href="https://www.datadoghq.com/2014/06/docker-ize-datadog/">Docker-ize Datadog with agent containers (原文)</a></p>

<p><a href="http://www.docker.com/">Docker</a> is an exciting technology that offers a different approach to building and running applications thanks to a clever combination of linux containers (good for ops) and a git-like approach to packaging software (good for dev) so that your containers have everything they need to run without dependencies.</p>

<p><a href="http://www.docker.com/">Docker</a>は、アプリケーションシステムを構築し運用するための刺激的なテクノロジーです。
このテクノロジーは、Linuxコンテナとgitのようなソフトウェアパッケージングの巧みな組み合わせのおかげで、他に依存することなくそれ自身で完全に動作することができます。</p>

<p>Many of you who are using Docker are embracing the Docker way and taking a container-only approach. As we release our <a href="https://www.datadoghq.com/2014/06/monitor-docker-datadog/">new Docker integration</a>, we don’t want to force you to break from a container-only strategy because of the traditional Datadog agent architecture. Instead, we’ve also embraced the Docker way and we’re pleased to announce a Docker-ized Datadog agent deployed in a container.</p>

<p>Dockerを採用しているユーザーは、Dockerの一般的な用法(the Docker way)に従い自分たちのアプリケーション用コンテナのみを起動するアプローチ(container-only approach)を採用しているでしょう。
Datadogが<a href="https://jhotta.github.io/blog/2014/06/10/monitoring-docker-with-the-datadog/">Docker用の新しいIntegration</a>をリリースしたのは、旧バージョンのDatadog agentのアーキテクチャの問題で、Datadogユーザーが、<strong>container-only</strong>アプローチを断念してほしくなかったからです。Datadogでは<a href="https://jhotta.github.io/blog/2014/06/10/monitoring-docker-with-the-datadog/">Docker用の新しいIntegration</a>にとどまらず、Dockerの一般的な用法(the Docker way)に従い、Datadog agentをインストールしたコンテナも準備しました。</p>

<h3>The Docker philosophy</h3>

<p>First, a brief introduction on how infrastructure is set up with Docker. In Docker, each of your applications is isolated in its own container. The blueprint for a container is its DockerFile which is a set of steps to create the container. These steps build the standard binaries and libraries and install your application’s code and its dependencies such as Python, <a href="http://www.johnmcostaiii.net/2013/installing-redis-on-docker/">Redis</a>, Postgres, etc.</p>

<p>まず、Dockerでどのようにシステムインフラがセットアップされるか簡単に紹介します。
Dockerでは、各アプリケーションはコンテナごとに隔離されています。
各コンテナの設計図である<strong>DockerFile</strong>には、コンテナの中身を設定していく手順が記述されています。
この設定手順には、標準的なバイナリやライブラリをビルドしたり、アプリケーションのコードとそのアプリケーションが依存するPython、<a href="http://www.johnmcostaiii.net/2013/installing-redis-on-docker/">Redis</a>、Postgresなどの依存ファイルをインストールする手順が記述されています。</p>

<p>The Docker engine then creates the actual container to run using namespaces and cgroups. These are two features found in recent versions of the Linux kernel used to isolate system calls and resource usage (CPU, memory, disk I/O, etc.) directly on your server. The end result is multiple containers on the server with each application thinking it is in its own machine by itself, without the overhead associated with fully-virtualized machines.</p>

<p>Dockerエンジンは、名前空間とcgroupsを使用し実行用の実コンテナを準備します。
最近のLinuxカーネルは、これらの名前空間とcgroupsの機能を使い、システムコールの隔離とホストサーバ上のリソース(CPU, memory, disk I/O, etc.) に対する利用制限を実現しています。結果従来型の仮想化技術のようなパフォーマンス低下の影響をうけることなく、ホストサーバ上の個々コンテナ内のアプリケーションは、個別のマシンを占有し動作しているのと同じ状態になります。</p>

<h3>The traditional Datadog set-up</h3>

<p>Until Docker arrived, applications were built in virtual servers or directly on raw servers. In this case, you <a href="http://docs.datadoghq.com/">install the agent</a> on your server and decide what applications and services you want to monitor in Datadog. If you want to send custom metrics to Datadog, you instrument your application with our Datadog version of StatsD, called <a href="http://docs.datadoghq.com/guides/dogstatsd/">DogStatsD</a>. This set-up is illustrated below.</p>

<p>Dockerが一般化する以前は、アプリケーションは物理サーバか従来型仮想サーバ上に構築されていました。このような場合では、各サーバに<a href="http://docs.datadoghq.com/">Datadog agentをインストールし</a>、監視対象のアプリケーションやサービスを決めていきます。任意のメトリックス(指標)をDatadogに転送したないなら、<a href="http://docs.datadoghq.com/guides/dogstatsd/">DogStatsD</a>(DatadogバージョンのStatsD)を使って、アプリケーションにメトリック(指標)採取用のコードを追記することになります。</p>

<p>Datadog agentの配置は、次のような配置になります。</p>

<p><img class="center" src="/images/blog-images/Traditional-2.png" width="800" height="800" title="&lsquo;Traditional way&rsquo; &lsquo;Traditional way&rsquo;" ></p>

<p>The traditional Datadog set-up in the Docker environment means the Datadog agent runs next to the Docker engine.</p>

<p>Docker環境での伝統的なDatadogのセットアップでは、Datadog agentをDokcerエンジンのとなりで起動していました。</p>

<p><img class="center" src="/images/blog-images/DockerImage1.png" width="400" height="400" title="&lsquo;Where the agent fits in a Docker environment&rsquo; &lsquo;Where the agent fits in a Docker environment&rsquo;" ></p>

<h3>Datadog the Docker Way</h3>

<p>Because the Docker philosophy is to isolate applications to a container, we have built a “Docker-ized” installation of the Datadog agent. We have isolated the agent into two kinds of Docker containers. Both of the container installations can be illustrated by the diagram below.</p>

<p>Dockerの哲学がアプリケーションをコンテナに収納しそれぞれを隔離することなので、Datadogでも<strong>“Docker-ized”</strong>(コンテナに収納)したDatadog agentを作ってみました。</p>

<p>下記に示すdd-agent&amp;dogstatsdコンテナ又はdogstatsdコンテナは、次の図のような配置になります。</p>

<p><img class="center" src="/images/blog-images/DockerizeImage2.png" width="600" height="600" title="&lsquo;Docker-ized Datadog&rsquo; &lsquo;Docker-ized Datadog&rsquo;" ></p>

<p>The first container includes the Datadog agent plus DogStatsD. The Datadog agent is responsible for sending us both native host and container-specific metrics, like number of containers, load, memory, disk usage, and latency. DogStatsD will send us custom metrics you have instrumented in containerized applications. Again, you can read more about what exactly Datadog monitors in Docker in our <a href="https://www.datadoghq.com/2014/06/monitor-docker-datadog/">Monitor Docker with Datadog</a> post.</p>

<p>最初に紹介するコンテナには、Datadog agentとDogStatsDがインストールされています。
このコンテナのDatadog agentは、Dokcerをホストしているサーバとコンテナ固有のメトリック(指標)の両方を送信します。例えば、コンテナ数、負荷、メモリ、ディスク使用量、レーテンシー時間等が含まれます。DogStatsDは、コンテナ内に収めたアプリケーションに設定した任意のメトリックス(指標)を転送します。Datadogが、Dockerに関し収集しているメトリックスの詳細を調べる方法を知りたい場合は、<a href="https://jhotta.github.io/blog/2014/06/10/monitoring-docker-with-the-datadog/">Monitor Docker with Datadog</a>の記事を参照してください。</p>

<p>```
FROM datadog/docker-dd-agent</p>

<h1>Set your API key</h1>

<p>RUN sed -i -e"s/^.<em>api_key:.</em>$/api_key: EXAMPLE_API_KEY/&ldquo; /etc/dd-agent/datadog.conf
```</p>

<p>If you only want to monitor custom metrics in containerized applications, the other Datadog container isolates DogstatsD so that you can send us custom metrics to monitor.</p>

<p>コンテナ内のアプリケーションの任意のメトリックス(指標)のみを監視したい場合は、DogstatsDを収納した別のDatadogコンテナ(dogstatsdコンテナ)を利用します。
このコンテナを利用することで、任意のメトリックス(指標)をDatadogに送信することができるようになります。</p>

<p>```
FROM datadog/docker-dogstatsd</p>

<h1>Set your API key</h1>

<p>RUN sed -i -e"s/^.<em>api_key:.</em>$/api_key: EXAMPLE_API_KEY/&ldquo; /etc/dd-agent/datadog.conf
```</p>

<p>For detailed documentation on how to install the Docker-ized Datadog containers, please visit our <a href="https://github.com/DataDog/dd-agent/wiki/Docker-Containers">Docker installation guide</a>.</p>

<p><strong>Docker-ized Datadog</strong>コンテナのインストール方法に関する詳細は、<a href="https://github.com/DataDog/dd-agent/wiki/Docker-Containers">Docker installation guide</a>を参照してください。</p>

<p>As mentioned in the <a href="https://www.datadoghq.com/2014/06/monitor-docker-datadog/">Monitor Docker with Datadog</a> post, if you would like to alert on and visualize Docker metrics, you can sign-up for a <a href="https://app.datadoghq.com/signup">14-day free trial of Datadog</a>. Docker metrics will be available immediately after installing the Datadog agent in its traditional format or as a container.</p>

<p>先の<a href="https://jhotta.github.io/blog/2014/06/10/monitoring-docker-with-the-datadog/">Monitor Docker with Datadog</a>の記事でも書いたように、Dockerのメトリックス(指標)を使って状況の可視化や通知をしたい場合は、<a href="https://app.datadoghq.com/signup">14日間のフリートライアル</a>を試してみてください。
Datadog agentをインストールした後、直ちにDockerエンジン、コンテナ、ホストマシンのメトリックス(指標)を監視できるようになります。</p>

<p>by <a href="https://www.linkedin.com/in/zahedahaidri">ZAHEDA HAIDRI</a> (Datadog, Inc)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モニターリングサービスのDatadogを使ってDockerをモニターリング&管理]]></title>
    <link href="http://jhotta.github.io/blog/2014/06/10/monitoring-docker-with-the-datadog/"/>
    <updated>2014-06-10T10:50:00+09:00</updated>
    <id>http://jhotta.github.io/blog/2014/06/10/monitoring-docker-with-the-datadog</id>
    <content type="html"><![CDATA[<p>「今日は、<a href="http://www.dockercon.com/">dockercon14</a>がサンフランシスコで開催されているな〜」と思っていたら、Datadog blogからもDocker関連の面白い記事が掲載されました。</p>

<p>Datadog agent 4.3.1をDockerホストOS上で起動し、他のアプリと同じようにIntegration用のYAMLファイルを設定することでDcoker内の各コンテナの状態をモニターリングできるということです。</p>

<p><a href="https://www.datadoghq.com">Datadog</a>の<a href="https://twitter.com/alq">@alq</a>が「もちろん翻訳してもいいよ〜! (Yes! Of course.)」言ってくれているので、次に日本語で同記事を転載します。</p>

<p>その前に次のシリーズを読んでおくと、Datadogはどうやってメトリックスを集めようしているのかが理解できると思います。</p>

<ul>
<li><a href="http://gihyo.jp/admin/serial/01/linux_containers/0003">第3回　Linuxカーネルのコンテナ機能［2］ ─cgroupとは？（その1）</a></li>
<li><a href="http://gihyo.jp/admin/serial/01/linux_containers/0002">第2回　コンテナの仕組みとLinuxカーネルのコンテナ機能［1］名前空間とは？</a></li>
<li><a href="http://gihyo.jp/admin/serial/01/linux_containers/0001">第1回　LXCとコンテナの基本</a></li>
</ul>


<h2>Monitor Docker with Datadog</h2>

<p><a href="https://www.datadoghq.com/2014/06/monitor-docker-datadog/">Monitor Docker with Datadog(原文)</a></p>

<p>Docker is an emerging platform to build and deploy software using lightweight, pared-down virtual machines known as containers. By delivering easy-to-provision recipes for developers and bit-for-bit compatibility between environments, Docker is a popular solution to solve continuous delivery in modern infrastructure.</p>

<p><a href="http://www.docker.com/">Docker</a>は、既存の仮想環境から贅肉を削ぎ落とし軽量化したLinuxコンテナという仕組みを使用し、ソフトウェアシステムを構築&amp;展開するための新たなプラットフォームです。Dockerは、アプリ開発者に簡単にプロビジョニングできるレシピを提供することと環境間の再現性を上げることで、現代インフラでの継続的デリバリーを実現する最も人気のある方法になりました。</p>

<p>Like virtual machines before them, containers require a new monitoring approach. Luckily, if you are a Datadog user, you can now take advantage of our newest integration: Docker.</p>

<p>従前の仮想マシンと同様に、Linuxコンテナでも新しい監視アプローチが必要にまります。Datadogユーザーであれば幸いなことに、最新のDocker Integrationの恩恵を受けることができます。</p>

<p>With our Docker integration you can monitor containers by running version 4.3.1 of the Datadog agent. The integration configuration is, like all other agent-based integrations, a simple YAML file.</p>

<p>バージョン4.3.1の<a href="http://docs.datadoghq.com/guides/basic_agent_usage/">Datadog agent</a>を導入することで、Docker Integrationを使ってコンテナを監視することができるようになります。
Docker Integrationの設定方法は、今まであった他のアプリケーションのIntegrationと同じように簡単な<a href="https://github.com/DataDog/dd-agent/blob/master/conf.d/docker.yaml.example">YAMLファイル形式</a>になっています。</p>

<h3>How Docker monitoring works</h3>

<p>The simplest way to monitor Docker containers is to run the Datadog Agent on the host, where it can access container statistics. This is especially true if you are deploying Docker on existing, full-fledged Host OSes, along existing applications such as databases.</p>

<p>Dcokerコンテナを監視するための最も簡単な方法は、コンテナのスタティック情報にアクセスできるホスト上でDatadog Agentを実行することです。本格的なホストOSにデータベースなどの既存のアプリケーションと共にDockerを展開するなら、尚更この方法は有効です。</p>

<p><img class="center" src="/images/blog-images/DockerImage1.png" width="400" height="400" title="&lsquo;Where the agent fits in a Docker environment&rsquo; &lsquo;Where the agent fits in a Docker environment&rsquo;" ></p>

<p>Since Docker uses existing kernel constructs (namespaces and cgroups) in order to run containers, the Datadog Agent uses the native cgroup accounting metrics to gather CPU, memory, network and I/O metrics of the containers every 15 seconds before they are forwarded to Datadog.</p>

<p>Dockerは、コンテナを実行するために既存のカーネル構成体（名前空間とcgroup）を使用しています。
Datadog agentは、このカーネル構造体のcgroupか提供するトリックス(指標)を使ってCPU、メモリ、ネットワーク、15秒ごとのコンテナI/Oの情報を収集し、Datadogに転送しています。</p>

<p><img class="center" src="/images/blog-images/DockerImage2_Screenboard.png" width="800" height="800" title="&lsquo;A Docker ScreenBoard&rsquo; &lsquo;A Docker ScreenBoard&rsquo;" ></p>

<h3>Monitor many containers efficiently with tags</h3>

<p>With easy-to-use, lightweight containers, you will likely dial up several times more running containers than the number of underlying physical or virtual hosts in your infrastructure. How do you then keep track and monitor them without spending time chasing after every single one of them? With tags.</p>

<p>簡単に使用でき軽量なコンテナを使うと、インフラストラクチャ内にある物理マシンまたは仮想ホストの数の数倍のコンテナを起動することになるでしょう。あなたらな、どのように時間をかけずに追跡し又監視しますか?　タグを使っては、どうでしょう!</p>

<p>Tags are the key to monitoring a lot of containers without additional effort. By default, the agent will monitor your containers and turn the Docker “name”, “image” and “command” attributes into a “tag”.</p>

<p>追加の努力をせずに大量のコンテナを監視するためには、<a href="http://docs.datadoghq.com/guides/metrics/#tags">タグ付け</a>が有効な解決策です。何もしなくてもDatadog agentは、Dockerの「名前」,「イメージ名」,「コマンド」の属性をタグに追加します。</p>

<p><img class="center" src="/images/blog-images/DockerImage3_tags.png" width="800" height="800" title="&lsquo;Tags&rsquo; &lsquo;Tags&rsquo;" ></p>

<h3>Graph specific metrics with tags</h3>

<p>In Datadog, you define the metrics shown in dashboards and graphs based on one or many tags. This allows you to track specific metrics for many containers in aggregate. Using tags, you can easily create a graph for a metric drawn from all containers running a given image.</p>

<p>Datadogでは、タグの組み合わせに基づいてダッシュボードやグラフに表示するメトリック(指標)を定義することができます。この複数のタグの組み合わせによって統計的に複数のコンテナの特定のメトリックス(指標)を追跡することができるようになります。又タグを使用すると、同じDockerイメージから起動しているコンテナのメトリックス(指標)を手軽にグラフを描くこともできます。</p>

<p>In the example below, we are showing the amount of CPU consumed, broken down by image.</p>

<p>以下の例では、CPUの消費量をDockerイメージの分類で表示しています。</p>

<p><img class="center" src="/images/blog-images/DockerImage4_graph_by_image.png" width="800" height="800" title="&lsquo;Using tags to visualize Docker performance&rsquo; &lsquo;Using tags to visualize Docker performance&rsquo;" ></p>

<h3>Alerts</h3>

<p>Tags are also very useful to define alerts that span clusters of containers. For instance, let us say that you are running a cluster of Redis containers and you want to be alerted when one of the containers is running out of memory.</p>

<p>タグの使用は、コンテナをクラスター化し、そのクラスターにアラートを定義するのに非常に便利です。たとえば、Redisが起動しているコンテナのクラスターを運用中、クラスタ内のどれかのコンテナにメモリの不足が発生した場合に、アラートを受け取るようにしたいとしましょう​​。</p>

<p>Instead of defining one alert per container, you only have to create a multi-alert on the docker.mem.rss metric and Datadog will trigger an alert if any container misbehaves.</p>

<p>各コンテナごとにアラートの定義する代わりに、<code>docker.mem.rss</code>のメトリックス(指標)を基に、<strong>multi-alert</strong>を設定します。Datadogでは、この設定によって任意のコンテナでの誤作動によりアラートを送信することができます。</p>

<p>You can also mix and match tags to express more complex conditions. For instance, you can monitor all Redis containers running the redis2.8 image that run on host alq-docker with a simple tag selection:</p>

<p>又タグは、より複雑な条件を設定するためにタグを組み合わせてマッチングさせることができます。たとえば、簡単なタグ選択により、ホスト名<code>alq-docker</code>上で実行されているDockerイメージ<code>redis2.8</code>のすべてのRedisのコンテナを監視することができます。</p>

<p><img class="center" src="/images/blog-images/DockerImage5-multi-alert.png" width="800" height="800" title="&lsquo;Monitoring all containers&rsquo; &lsquo;Monitoring all containers&rsquo;" ></p>

<h3>Monitor your containers’ lifecycles</h3>

<p>Since containers are designed to be as short-lived (or long-lived) as traditional OS processes, it can be very useful to track particular containers throughout their lifecycles.</p>

<p>コンテナは、伝統的なOSのプロセスのように短期間しか存在しないように設計されています。従って、そのライフサイクルを通して状態を追跡することは非常に重要です。</p>

<p>Much like any other meaningful event in your infrastructure, you can search for Docker container create/start/stop/destroy events using the Events Stream. Simply use “sources:docker” as the search filter.</p>

<p>インフラ内の他の重要な出来事のように、Dockerコンテナのcreate/start/stop/destroy イベントは、Datadogのイベントストリームで検索することができます。<a href="https://www.datadoghq.com/2014/05/filter-datadog-events-stream-pinpoint-events-infrastructure/">検索フィルター</a>で<code>sources:docker</code>と入力し検索するだけです。</p>

<p><img class="center" src="/images/blog-images/DockerImage6_Events.png" width="800" height="800" title="&lsquo;search filter&rsquo; &lsquo;search filter&rsquo;" ></p>

<p>You can also apply the same search to any TimeBoard to visualize Docker container events in the context of Docker and non-Docker metrics. In the following example, we overlay containers starting and stopping over memory and CPU metrics.</p>

<p>更に、Dockerに関連したメトリックス(指標)とそれ以外のメトリック(指標)の検索結果を同一<strong>TimeBoard</strong>に混在させて表示することができます。次の例では、Dockerコンテナの起動と停止と、ホストマシンのメモリとCPUの消費量を同じ<strong>TimeBoard</strong>で表示しています。</p>

<p><img class="center" src="/images/blog-images/DockerImage7_Correlations.png" width="800" height="800" title="&lsquo;Docker metrics &amp; events correlated&rsquo; &lsquo;Docker metrics &amp; events correlated&rsquo;" ></p>

<h3>Explore Docker metrics</h3>

<p>To explore the Docker metrics that are available, you can use the Metrics Explorer in Datadog and type “docker” in the first drop-down.</p>

<p>利用可能なDockerのメトリックス(指標)は、DatadogのMetrics Explorer画面内の最初のドロップダウンメニューで<code>docker</code>と入力することで探索することができます。</p>

<p><img class="center" src="/images/blog-images/DockerImage8_metrics.png" width="800" height="800" title="&lsquo;Explore Docker metrics&rsquo; &lsquo;Explore Docker metrics&rsquo;" ></p>

<p>You can find detailed descriptions about all the metrics in Docker’s Runtime Metrics guide.</p>

<p>これらのメトリックスの詳細に関しては、<a href="http://docs.docker.com/articles/runmetrics/">Docker’s Runtime Metrics guide</a>を参照してください。</p>

<p>If you would like to easily visualize and alert on Docker metrics, try out Datadog for free with a 14-day trial. Metrics for the Docker engine, containers and underlying hosts will be immediately available after installing the Datadog agent.</p>

<p>Dockerのメトリックス(指標)を使って状況の可視化や通知をしたい場合は、14日間の<a href="https://app.datadoghq.com/signup">フリートライアル</a>を試してみてください。Datadog agentをインストールした後、直ちにDockerエンジン、コンテナ、ホストマシンのメトリックス(指標)を監視できるようになります。</p>

<p>by <a href="http://www.linkedin.com/in/alexislequoc">ALEXIS LÊ-QUÔC</a> (CTO &amp; co-founder Datadog, Inc)</p>
]]></content>
  </entry>
  
</feed>
